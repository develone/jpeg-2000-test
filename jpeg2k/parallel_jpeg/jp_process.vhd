-- File: jp_process.vhd
-- Generated by MyHDL 0.9dev
-- Date: Sun Mar 15 06:22:40 2015


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_09.all;

entity jp_process is
    port (
        res_out_x: out signed (15 downto 0);
        left_s_i: in unsigned(255 downto 0);
        sam_s_i: in unsigned(255 downto 0);
        right_s_i: in unsigned(255 downto 0);
        flgs_s_i: in unsigned(79 downto 0);
        noupdate_s: out std_logic;
        update_s: in std_logic
    );
end entity jp_process;


architecture MyHDL of jp_process is


constant LVL0: integer := 2**4;
constant YES: integer := 1;
constant NO: integer := 0;



type t_array_right_s is array(0 to 16-1) of unsigned(15 downto 0);
signal right_s: t_array_right_s;
type t_array_flgs_s is array(0 to 16-1) of unsigned(4 downto 0);
signal flgs_s: t_array_flgs_s;
type t_array_sam_s is array(0 to 16-1) of unsigned(15 downto 0);
signal sam_s: t_array_sam_s;
type t_array_left_s is array(0 to 16-1) of unsigned(15 downto 0);
signal left_s: t_array_left_s;

begin


right_s(0) <= right_s_i(16-1 downto 0);
right_s(1) <= right_s_i(32-1 downto 16);
right_s(2) <= right_s_i(48-1 downto 32);
right_s(3) <= right_s_i(64-1 downto 48);
right_s(4) <= right_s_i(80-1 downto 64);
right_s(5) <= right_s_i(96-1 downto 80);
right_s(6) <= right_s_i(112-1 downto 96);
right_s(7) <= right_s_i(128-1 downto 112);
right_s(8) <= right_s_i(144-1 downto 128);
right_s(9) <= right_s_i(160-1 downto 144);
right_s(10) <= right_s_i(176-1 downto 160);
right_s(11) <= right_s_i(192-1 downto 176);
right_s(12) <= right_s_i(208-1 downto 192);
right_s(13) <= right_s_i(224-1 downto 208);
right_s(14) <= right_s_i(240-1 downto 224);
right_s(15) <= right_s_i(256-1 downto 240);
flgs_s(0) <= flgs_s_i(5-1 downto 0);
flgs_s(1) <= flgs_s_i(10-1 downto 5);
flgs_s(2) <= flgs_s_i(15-1 downto 10);
flgs_s(3) <= flgs_s_i(20-1 downto 15);
flgs_s(4) <= flgs_s_i(25-1 downto 20);
flgs_s(5) <= flgs_s_i(30-1 downto 25);
flgs_s(6) <= flgs_s_i(35-1 downto 30);
flgs_s(7) <= flgs_s_i(40-1 downto 35);
flgs_s(8) <= flgs_s_i(45-1 downto 40);
flgs_s(9) <= flgs_s_i(50-1 downto 45);
flgs_s(10) <= flgs_s_i(55-1 downto 50);
flgs_s(11) <= flgs_s_i(60-1 downto 55);
flgs_s(12) <= flgs_s_i(65-1 downto 60);
flgs_s(13) <= flgs_s_i(70-1 downto 65);
flgs_s(14) <= flgs_s_i(75-1 downto 70);
flgs_s(15) <= flgs_s_i(80-1 downto 75);
sam_s(0) <= sam_s_i(16-1 downto 0);
sam_s(1) <= sam_s_i(32-1 downto 16);
sam_s(2) <= sam_s_i(48-1 downto 32);
sam_s(3) <= sam_s_i(64-1 downto 48);
sam_s(4) <= sam_s_i(80-1 downto 64);
sam_s(5) <= sam_s_i(96-1 downto 80);
sam_s(6) <= sam_s_i(112-1 downto 96);
sam_s(7) <= sam_s_i(128-1 downto 112);
sam_s(8) <= sam_s_i(144-1 downto 128);
sam_s(9) <= sam_s_i(160-1 downto 144);
sam_s(10) <= sam_s_i(176-1 downto 160);
sam_s(11) <= sam_s_i(192-1 downto 176);
sam_s(12) <= sam_s_i(208-1 downto 192);
sam_s(13) <= sam_s_i(224-1 downto 208);
sam_s(14) <= sam_s_i(240-1 downto 224);
sam_s(15) <= sam_s_i(256-1 downto 240);
left_s(0) <= left_s_i(16-1 downto 0);
left_s(1) <= left_s_i(32-1 downto 16);
left_s(2) <= left_s_i(48-1 downto 32);
left_s(3) <= left_s_i(64-1 downto 48);
left_s(4) <= left_s_i(80-1 downto 64);
left_s(5) <= left_s_i(96-1 downto 80);
left_s(6) <= left_s_i(112-1 downto 96);
left_s(7) <= left_s_i(128-1 downto 112);
left_s(8) <= left_s_i(144-1 downto 128);
left_s(9) <= left_s_i(160-1 downto 144);
left_s(10) <= left_s_i(176-1 downto 160);
left_s(11) <= left_s_i(192-1 downto 176);
left_s(12) <= left_s_i(208-1 downto 192);
left_s(13) <= left_s_i(224-1 downto 208);
left_s(14) <= left_s_i(240-1 downto 224);
left_s(15) <= left_s_i(256-1 downto 240);

-- update_s needs to be 1
-- for the res_out_x to be valid
-- noupdate_s goes lo when a
-- res_out_x valid
-- fwd dwt even flgs_s eq 7
-- inv dwt even flgs_s eq 5
-- fwd dwt odd flgs_s eq 6
-- inv dwt odd flgs_s eq 4
JP_PROCESS_JPEG_LOGIC: process (update_s, right_s, flgs_s, sam_s, left_s) is
begin
    if bool(update_s) then
        noupdate_s <= '0';
        for i in 0 to LVL0-1 loop
            if (flgs_s(i) = 7) then
                res_out_x <= signed(sam_s(i) - (shift_right(left_s(i), 1) + shift_right(right_s(i), 1)));
            elsif (flgs_s(i) = 5) then
                res_out_x <= signed(sam_s(i) + (shift_right(left_s(i), 1) + shift_right(right_s(i), 1)));
            elsif (flgs_s(i) = 6) then
                res_out_x <= signed(sam_s(i) + shift_right((left_s(i) + (right_s(i) + 2)), 2));
            elsif (flgs_s(i) = 4) then
                res_out_x <= signed(sam_s(i) - shift_right((left_s(i) + (right_s(i) + 2)), 2));
            end if;
        end loop;
    else
        noupdate_s <= '1';
    end if;
end process JP_PROCESS_JPEG_LOGIC;

end architecture MyHDL;
