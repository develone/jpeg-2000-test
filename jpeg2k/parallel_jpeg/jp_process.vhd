-- File: jp_process.vhd
-- Generated by MyHDL 0.9dev
-- Date: Tue Feb 10 14:04:51 2015


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_09.all;

entity jp_process is
    port (
        res_out_x: out signed (7 downto 0);
        left_s_i: in unsigned(63 downto 0);
        sam_s_i: in unsigned(63 downto 0);
        right_s_i: in unsigned(63 downto 0);
        flgs_s_i: in unsigned(39 downto 0);
        noupdate_s: out std_logic;
        update_s: in std_logic
    );
end entity jp_process;


architecture MyHDL of jp_process is


constant LVL0: integer := 8;
constant YES: integer := 1;
constant NO: integer := 0;



type t_array_right_s is array(0 to 8-1) of unsigned(7 downto 0);
signal right_s: t_array_right_s;
type t_array_flgs_s is array(0 to 8-1) of unsigned(4 downto 0);
signal flgs_s: t_array_flgs_s;
type t_array_sam_s is array(0 to 8-1) of unsigned(7 downto 0);
signal sam_s: t_array_sam_s;
type t_array_left_s is array(0 to 8-1) of unsigned(7 downto 0);
signal left_s: t_array_left_s;

begin


right_s(0) <= right_s_i(8-1 downto 0);
right_s(1) <= right_s_i(16-1 downto 8);
right_s(2) <= right_s_i(24-1 downto 16);
right_s(3) <= right_s_i(32-1 downto 24);
right_s(4) <= right_s_i(40-1 downto 32);
right_s(5) <= right_s_i(48-1 downto 40);
right_s(6) <= right_s_i(56-1 downto 48);
right_s(7) <= right_s_i(64-1 downto 56);
flgs_s(0) <= flgs_s_i(5-1 downto 0);
flgs_s(1) <= flgs_s_i(10-1 downto 5);
flgs_s(2) <= flgs_s_i(15-1 downto 10);
flgs_s(3) <= flgs_s_i(20-1 downto 15);
flgs_s(4) <= flgs_s_i(25-1 downto 20);
flgs_s(5) <= flgs_s_i(30-1 downto 25);
flgs_s(6) <= flgs_s_i(35-1 downto 30);
flgs_s(7) <= flgs_s_i(40-1 downto 35);
sam_s(0) <= sam_s_i(8-1 downto 0);
sam_s(1) <= sam_s_i(16-1 downto 8);
sam_s(2) <= sam_s_i(24-1 downto 16);
sam_s(3) <= sam_s_i(32-1 downto 24);
sam_s(4) <= sam_s_i(40-1 downto 32);
sam_s(5) <= sam_s_i(48-1 downto 40);
sam_s(6) <= sam_s_i(56-1 downto 48);
sam_s(7) <= sam_s_i(64-1 downto 56);
left_s(0) <= left_s_i(8-1 downto 0);
left_s(1) <= left_s_i(16-1 downto 8);
left_s(2) <= left_s_i(24-1 downto 16);
left_s(3) <= left_s_i(32-1 downto 24);
left_s(4) <= left_s_i(40-1 downto 32);
left_s(5) <= left_s_i(48-1 downto 40);
left_s(6) <= left_s_i(56-1 downto 48);
left_s(7) <= left_s_i(64-1 downto 56);

-- update_s needs to be 1
-- for the res_out_x to be valid
-- noupdate_s goes lo when a
-- res_out_x valid
-- fwd dwt even flgs_s eq 7
-- inv dwt even flgs_s eq 5
-- fwd dwt odd flgs_s eq 6
-- inv dwt odd flgs_s eq 4
JP_PROCESS_JPEG_LOGIC: process (update_s, right_s(0), right_s(1), right_s(2), right_s(3), right_s(4), right_s(5), right_s(6), right_s(7), flgs_s(0), flgs_s(1), flgs_s(2), flgs_s(3), flgs_s(4), flgs_s(5), flgs_s(6), flgs_s(7), sam_s(0), sam_s(1), sam_s(2), sam_s(3), sam_s(4), sam_s(5), sam_s(6), sam_s(7), left_s(0), left_s(1), left_s(2), left_s(3), left_s(4), left_s(5), left_s(6), left_s(7)) is
begin
    if bool(update_s) then
        noupdate_s <= '0';
        for i in 0 to LVL0-1 loop
            if (flgs_s(i) = 7) then
                res_out_x <= signed(sam_s(i) - (shift_right(left_s(i), 1) + shift_right(right_s(i), 1)));
            elsif (flgs_s(i) = 5) then
                res_out_x <= signed(sam_s(i) + (shift_right(left_s(i), 1) + shift_right(right_s(i), 1)));
            elsif (flgs_s(i) = 6) then
                res_out_x <= signed(sam_s(i) + shift_right((left_s(i) + (right_s(i) + 2)), 2));
            elsif (flgs_s(i) = 4) then
                res_out_x <= signed(sam_s(i) - shift_right((left_s(i) + (right_s(i) + 2)), 2));
            end if;
        end loop;
    else
        noupdate_s <= '1';
    end if;
end process JP_PROCESS_JPEG_LOGIC;

end architecture MyHDL;
