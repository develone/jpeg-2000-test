-- File: top_jpeg.vhd
-- Generated by MyHDL 0.9dev
-- Date: Wed Apr  1 08:16:57 2015


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_09.all;

entity top_jpeg is
    port (
        clk: in std_logic;
        res_out_x: out signed (9 downto 0);
        left_s_i: in unsigned(143 downto 0);
        sam_s_i: in unsigned(143 downto 0);
        right_s_i: in unsigned(143 downto 0);
        flgs_s_i: in unsigned(79 downto 0);
        noupdate_s: out std_logic;
        update_s: in std_logic;
        row_ind: in unsigned(9 downto 0);
        col_ind: in unsigned(9 downto 0);
        flat_lf: out unsigned(143 downto 0);
        flat_sa: out unsigned(143 downto 0);
        flat_rt: out unsigned(143 downto 0);
        z: in unsigned(8 downto 0);
        x: in signed (9 downto 0);
        ma_row: in unsigned(3 downto 0);
        ma_col: in unsigned(3 downto 0);
        dout_lf: out unsigned(143 downto 0);
        dout_sa: out unsigned(143 downto 0);
        dout_rt: out unsigned(143 downto 0);
        dout_res: out unsigned(8 downto 0);
        din_lf: in unsigned(143 downto 0);
        din_sa: in unsigned(143 downto 0);
        din_rt: in unsigned(143 downto 0);
        din_res: in unsigned(8 downto 0);
        addr_lf: in unsigned(9 downto 0);
        addr_sa: in unsigned(9 downto 0);
        addr_rt: in unsigned(9 downto 0);
        addr_res: in unsigned(9 downto 0);
        we_lf: in std_logic;
        we_sa: in std_logic;
        we_rt: in std_logic;
        we_res: in std_logic
    );
end entity top_jpeg;


architecture MyHDL of top_jpeg is


constant LVL0: integer := 2**4;
constant YES: integer := 1;
constant NO: integer := 0;



signal addr_flgs: unsigned(9 downto 0);
signal dout_flgs: unsigned(79 downto 0);
signal instance_mat_rt_mcol: unsigned(8 downto 0);
signal instance_mat_rt_flat_i: unsigned(143 downto 0);
signal instance_mat_sa_mcol: unsigned(8 downto 0);
signal instance_mat_sa_flat_i: unsigned(143 downto 0);
signal instance_mat_lf_mcol: unsigned(8 downto 0);
signal instance_mat_lf_flat_i: unsigned(143 downto 0);
type t_array_instance_dut_right_s is array(0 to 16-1) of unsigned(8 downto 0);
signal instance_dut_right_s: t_array_instance_dut_right_s;
type t_array_instance_dut_flgs_s is array(0 to 16-1) of unsigned(4 downto 0);
signal instance_dut_flgs_s: t_array_instance_dut_flgs_s;
type t_array_instance_dut_sam_s is array(0 to 16-1) of unsigned(8 downto 0);
signal instance_dut_sam_s: t_array_instance_dut_sam_s;
type t_array_instance_dut_left_s is array(0 to 16-1) of unsigned(8 downto 0);
signal instance_dut_left_s: t_array_instance_dut_left_s;
type t_array_instance_ram_res_mem is array(0 to 512-1) of unsigned(8 downto 0);
signal instance_ram_res_mem: t_array_instance_ram_res_mem;
type t_array_instance_ram_rt_mem is array(0 to 512-1) of unsigned(143 downto 0);
signal instance_ram_rt_mem: t_array_instance_ram_rt_mem;
type t_array_instance_ram_sa_mem is array(0 to 512-1) of unsigned(143 downto 0);
signal instance_ram_sa_mem: t_array_instance_ram_sa_mem;
type t_array_instance_ram_lf_mem is array(0 to 512-1) of unsigned(143 downto 0);
signal instance_ram_lf_mem: t_array_instance_ram_lf_mem;

begin

addr_flgs <= to_unsigned(0, 10);
instance_mat_rt_mcol <= to_unsigned(0, 9);
instance_mat_sa_mcol <= to_unsigned(0, 9);
instance_mat_lf_mcol <= to_unsigned(0, 9);

instance_mat_rt_flat_i(144-1 downto 135) <= None;
instance_mat_rt_flat_i(135-1 downto 126) <= None;
instance_mat_rt_flat_i(126-1 downto 117) <= None;
instance_mat_rt_flat_i(117-1 downto 108) <= None;
instance_mat_rt_flat_i(108-1 downto 99) <= None;
instance_mat_rt_flat_i(99-1 downto 90) <= None;
instance_mat_rt_flat_i(90-1 downto 81) <= None;
instance_mat_rt_flat_i(81-1 downto 72) <= None;
instance_mat_rt_flat_i(72-1 downto 63) <= None;
instance_mat_rt_flat_i(63-1 downto 54) <= None;
instance_mat_rt_flat_i(54-1 downto 45) <= None;
instance_mat_rt_flat_i(45-1 downto 36) <= None;
instance_mat_rt_flat_i(36-1 downto 27) <= None;
instance_mat_rt_flat_i(27-1 downto 18) <= None;
instance_mat_rt_flat_i(18-1 downto 9) <= None;
instance_mat_rt_flat_i(9-1 downto 0) <= instance_mat_rt_mcol(9-1 downto 0);
instance_mat_sa_flat_i(144-1 downto 135) <= None;
instance_mat_sa_flat_i(135-1 downto 126) <= None;
instance_mat_sa_flat_i(126-1 downto 117) <= None;
instance_mat_sa_flat_i(117-1 downto 108) <= None;
instance_mat_sa_flat_i(108-1 downto 99) <= None;
instance_mat_sa_flat_i(99-1 downto 90) <= None;
instance_mat_sa_flat_i(90-1 downto 81) <= None;
instance_mat_sa_flat_i(81-1 downto 72) <= None;
instance_mat_sa_flat_i(72-1 downto 63) <= None;
instance_mat_sa_flat_i(63-1 downto 54) <= None;
instance_mat_sa_flat_i(54-1 downto 45) <= None;
instance_mat_sa_flat_i(45-1 downto 36) <= None;
instance_mat_sa_flat_i(36-1 downto 27) <= None;
instance_mat_sa_flat_i(27-1 downto 18) <= None;
instance_mat_sa_flat_i(18-1 downto 9) <= None;
instance_mat_sa_flat_i(9-1 downto 0) <= instance_mat_sa_mcol(9-1 downto 0);
instance_mat_lf_flat_i(144-1 downto 135) <= None;
instance_mat_lf_flat_i(135-1 downto 126) <= None;
instance_mat_lf_flat_i(126-1 downto 117) <= None;
instance_mat_lf_flat_i(117-1 downto 108) <= None;
instance_mat_lf_flat_i(108-1 downto 99) <= None;
instance_mat_lf_flat_i(99-1 downto 90) <= None;
instance_mat_lf_flat_i(90-1 downto 81) <= None;
instance_mat_lf_flat_i(81-1 downto 72) <= None;
instance_mat_lf_flat_i(72-1 downto 63) <= None;
instance_mat_lf_flat_i(63-1 downto 54) <= None;
instance_mat_lf_flat_i(54-1 downto 45) <= None;
instance_mat_lf_flat_i(45-1 downto 36) <= None;
instance_mat_lf_flat_i(36-1 downto 27) <= None;
instance_mat_lf_flat_i(27-1 downto 18) <= None;
instance_mat_lf_flat_i(18-1 downto 9) <= None;
instance_mat_lf_flat_i(9-1 downto 0) <= instance_mat_lf_mcol(9-1 downto 0);
instance_dut_right_s(0) <= right_s_i(9-1 downto 0);
instance_dut_right_s(1) <= right_s_i(18-1 downto 9);
instance_dut_right_s(2) <= right_s_i(27-1 downto 18);
instance_dut_right_s(3) <= right_s_i(36-1 downto 27);
instance_dut_right_s(4) <= right_s_i(45-1 downto 36);
instance_dut_right_s(5) <= right_s_i(54-1 downto 45);
instance_dut_right_s(6) <= right_s_i(63-1 downto 54);
instance_dut_right_s(7) <= right_s_i(72-1 downto 63);
instance_dut_right_s(8) <= right_s_i(81-1 downto 72);
instance_dut_right_s(9) <= right_s_i(90-1 downto 81);
instance_dut_right_s(10) <= right_s_i(99-1 downto 90);
instance_dut_right_s(11) <= right_s_i(108-1 downto 99);
instance_dut_right_s(12) <= right_s_i(117-1 downto 108);
instance_dut_right_s(13) <= right_s_i(126-1 downto 117);
instance_dut_right_s(14) <= right_s_i(135-1 downto 126);
instance_dut_right_s(15) <= right_s_i(144-1 downto 135);
instance_dut_flgs_s(0) <= flgs_s_i(5-1 downto 0);
instance_dut_flgs_s(1) <= flgs_s_i(10-1 downto 5);
instance_dut_flgs_s(2) <= flgs_s_i(15-1 downto 10);
instance_dut_flgs_s(3) <= flgs_s_i(20-1 downto 15);
instance_dut_flgs_s(4) <= flgs_s_i(25-1 downto 20);
instance_dut_flgs_s(5) <= flgs_s_i(30-1 downto 25);
instance_dut_flgs_s(6) <= flgs_s_i(35-1 downto 30);
instance_dut_flgs_s(7) <= flgs_s_i(40-1 downto 35);
instance_dut_flgs_s(8) <= flgs_s_i(45-1 downto 40);
instance_dut_flgs_s(9) <= flgs_s_i(50-1 downto 45);
instance_dut_flgs_s(10) <= flgs_s_i(55-1 downto 50);
instance_dut_flgs_s(11) <= flgs_s_i(60-1 downto 55);
instance_dut_flgs_s(12) <= flgs_s_i(65-1 downto 60);
instance_dut_flgs_s(13) <= flgs_s_i(70-1 downto 65);
instance_dut_flgs_s(14) <= flgs_s_i(75-1 downto 70);
instance_dut_flgs_s(15) <= flgs_s_i(80-1 downto 75);
instance_dut_sam_s(0) <= sam_s_i(9-1 downto 0);
instance_dut_sam_s(1) <= sam_s_i(18-1 downto 9);
instance_dut_sam_s(2) <= sam_s_i(27-1 downto 18);
instance_dut_sam_s(3) <= sam_s_i(36-1 downto 27);
instance_dut_sam_s(4) <= sam_s_i(45-1 downto 36);
instance_dut_sam_s(5) <= sam_s_i(54-1 downto 45);
instance_dut_sam_s(6) <= sam_s_i(63-1 downto 54);
instance_dut_sam_s(7) <= sam_s_i(72-1 downto 63);
instance_dut_sam_s(8) <= sam_s_i(81-1 downto 72);
instance_dut_sam_s(9) <= sam_s_i(90-1 downto 81);
instance_dut_sam_s(10) <= sam_s_i(99-1 downto 90);
instance_dut_sam_s(11) <= sam_s_i(108-1 downto 99);
instance_dut_sam_s(12) <= sam_s_i(117-1 downto 108);
instance_dut_sam_s(13) <= sam_s_i(126-1 downto 117);
instance_dut_sam_s(14) <= sam_s_i(135-1 downto 126);
instance_dut_sam_s(15) <= sam_s_i(144-1 downto 135);
instance_dut_left_s(0) <= left_s_i(9-1 downto 0);
instance_dut_left_s(1) <= left_s_i(18-1 downto 9);
instance_dut_left_s(2) <= left_s_i(27-1 downto 18);
instance_dut_left_s(3) <= left_s_i(36-1 downto 27);
instance_dut_left_s(4) <= left_s_i(45-1 downto 36);
instance_dut_left_s(5) <= left_s_i(54-1 downto 45);
instance_dut_left_s(6) <= left_s_i(63-1 downto 54);
instance_dut_left_s(7) <= left_s_i(72-1 downto 63);
instance_dut_left_s(8) <= left_s_i(81-1 downto 72);
instance_dut_left_s(9) <= left_s_i(90-1 downto 81);
instance_dut_left_s(10) <= left_s_i(99-1 downto 90);
instance_dut_left_s(11) <= left_s_i(108-1 downto 99);
instance_dut_left_s(12) <= left_s_i(117-1 downto 108);
instance_dut_left_s(13) <= left_s_i(126-1 downto 117);
instance_dut_left_s(14) <= left_s_i(135-1 downto 126);
instance_dut_left_s(15) <= left_s_i(144-1 downto 135);


TOP_JPEG_INSTANCE_RAM_SA_WRITE: process (clk) is
begin
    if rising_edge(clk) then
        if bool(we_sa) then
            instance_ram_sa_mem(to_integer(addr_sa)) <= din_sa;
        end if;
    end if;
end process TOP_JPEG_INSTANCE_RAM_SA_WRITE;



dout_sa <= instance_ram_sa_mem(to_integer(addr_sa));

-- update_s needs to be 1
-- for the res_out_x to be valid
-- noupdate_s goes lo when a
-- res_out_x valid
-- fwd dwt even flgs_s eq 7
-- inv dwt even flgs_s eq 5
-- fwd dwt odd flgs_s eq 6
-- inv dwt odd flgs_s eq 4
TOP_JPEG_INSTANCE_DUT_JPEG_LOGIC: process (update_s, instance_dut_right_s, instance_dut_flgs_s, instance_dut_sam_s, instance_dut_left_s) is
begin
    if bool(update_s) then
        noupdate_s <= '0';
        for i in 0 to LVL0-1 loop
            if (instance_dut_flgs_s(i) = 7) then
                res_out_x <= (resize(signed(instance_dut_sam_s(i)), 10) - (shift_right(resize(signed(instance_dut_left_s(i)), 10), 1) + shift_right(resize(signed(instance_dut_right_s(i)), 10), 1)));
            elsif (instance_dut_flgs_s(i) = 5) then
                res_out_x <= (resize(signed(instance_dut_sam_s(i)), 10) + (shift_right(resize(signed(instance_dut_left_s(i)), 10), 1) + shift_right(resize(signed(instance_dut_right_s(i)), 10), 1)));
            elsif (instance_dut_flgs_s(i) = 6) then
                res_out_x <= (resize(signed(instance_dut_sam_s(i)), 10) + shift_right(((resize(signed(instance_dut_left_s(i)), 10) + resize(signed(instance_dut_right_s(i)), 10)) + 2), 2));
            elsif (instance_dut_flgs_s(i) = 4) then
                res_out_x <= (resize(signed(instance_dut_sam_s(i)), 10) - shift_right(((resize(signed(instance_dut_left_s(i)), 10) + resize(signed(instance_dut_right_s(i)), 10)) + 2), 2));
            end if;
        end loop;
    else
        noupdate_s <= '1';
    end if;
end process TOP_JPEG_INSTANCE_DUT_JPEG_LOGIC;



flat_rt <= instance_mat_rt_flat_i;


TOP_JPEG_INSTANCE_RAM_LF_WRITE: process (clk) is
begin
    if rising_edge(clk) then
        if bool(we_lf) then
            instance_ram_lf_mem(to_integer(addr_lf)) <= din_lf;
        end if;
    end if;
end process TOP_JPEG_INSTANCE_RAM_LF_WRITE;



dout_lf <= instance_ram_lf_mem(to_integer(addr_lf));



flat_sa <= instance_mat_sa_flat_i;


TOP_JPEG_INSTANCE_RAM_RES_WRITE: process (clk) is
begin
    if falling_edge(clk) then
        if bool(we_res) then
            instance_ram_res_mem(to_integer(addr_res)) <= din_res;
        end if;
    end if;
end process TOP_JPEG_INSTANCE_RAM_RES_WRITE;



dout_res <= instance_ram_res_mem(to_integer(addr_res));



flat_lf <= instance_mat_lf_flat_i;


TOP_JPEG_INSTANCE_ROM_FLGS_READ: process (addr_flgs) is
begin
    case to_integer(addr_flgs) is
        when 0 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000000000000000000000000111";
        when 1 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000000000000000000011100000";
        when 2 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000000000000001110000000000";
        when 3 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000000000111000000000000000";
        when 4 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000011100000000000000000000";
        when 5 => dout_flgs <= "00000000000000000000000000000000000000000000000000001110000000000000000000000000";
        when 6 => dout_flgs <= "00000000000000000000000000000000000000000000000111000000000000000000000000000000";
        when 7 => dout_flgs <= "00000000000000000000000000000000000000000011100000000000000000000000000000000000";
        when 8 => dout_flgs <= "00000000000000000000000000000000000001110000000000000000000000000000000000000000";
        when 9 => dout_flgs <= "00000000000000000000000000000000111000000000000000000000000000000000000000000000";
        when 10 => dout_flgs <= "00000000000000000000000000011100000000000000000000000000000000000000000000000000";
        when 11 => dout_flgs <= "00000000000000000000001110000000000000000000000000000000000000000000000000000000";
        when 12 => dout_flgs <= "00000000000000000111000000000000000000000000000000000000000000000000000000000000";
        when 13 => dout_flgs <= "00000000000011100000000000000000000000000000000000000000000000000000000000000000";
        when 14 => dout_flgs <= "00000001110000000000000000000000000000000000000000000000000000000000000000000000";
        when 15 => dout_flgs <= "00111000000000000000000000000000000000000000000000000000000000000000000000000000";
        when 16 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000000000000000000000000110";
        when 17 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000000000000000000011000000";
        when 18 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000000000000001100000000000";
        when 19 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000000000110000000000000000";
        when 20 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000011000000000000000000000";
        when 21 => dout_flgs <= "00000000000000000000000000000000000000000000000000001100000000000000000000000000";
        when 22 => dout_flgs <= "00000000000000000000000000000000000000000000000110000000000000000000000000000000";
        when 23 => dout_flgs <= "00000000000000000000000000000000000000000011000000000000000000000000000000000000";
        when 24 => dout_flgs <= "00000000000000000000000000000000000001100000000000000000000000000000000000000000";
        when 25 => dout_flgs <= "00000000000000000000000000000000110000000000000000000000000000000000000000000000";
        when 26 => dout_flgs <= "00000000000000000000000000011000000000000000000000000000000000000000000000000000";
        when 27 => dout_flgs <= "00000000000000000000001100000000000000000000000000000000000000000000000000000000";
        when 28 => dout_flgs <= "00000000000000000110000000000000000000000000000000000000000000000000000000000000";
        when 29 => dout_flgs <= "00000000000011000000000000000000000000000000000000000000000000000000000000000000";
        when 30 => dout_flgs <= "00000001100000000000000000000000000000000000000000000000000000000000000000000000";
        when 31 => dout_flgs <= "00110000000000000000000000000000000000000000000000000000000000000000000000000000";
        when 32 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000000000000000000000000101";
        when 33 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000000000000000000010100000";
        when 34 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000000000000001010000000000";
        when 35 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000000000101000000000000000";
        when 36 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000010100000000000000000000";
        when 37 => dout_flgs <= "00000000000000000000000000000000000000000000000000001010000000000000000000000000";
        when 38 => dout_flgs <= "00000000000000000000000000000000000000000000000101000000000000000000000000000000";
        when 39 => dout_flgs <= "00000000000000000000000000000000000000000010100000000000000000000000000000000000";
        when 40 => dout_flgs <= "00000000000000000000000000000000000001010000000000000000000000000000000000000000";
        when 41 => dout_flgs <= "00000000000000000000000000000000101000000000000000000000000000000000000000000000";
        when 42 => dout_flgs <= "00000000000000000000000000010100000000000000000000000000000000000000000000000000";
        when 43 => dout_flgs <= "00000000000000000000001010000000000000000000000000000000000000000000000000000000";
        when 44 => dout_flgs <= "00000000000000000101000000000000000000000000000000000000000000000000000000000000";
        when 45 => dout_flgs <= "00000000000010100000000000000000000000000000000000000000000000000000000000000000";
        when 46 => dout_flgs <= "00000001010000000000000000000000000000000000000000000000000000000000000000000000";
        when 47 => dout_flgs <= "00101000000000000000000000000000000000000000000000000000000000000000000000000000";
        when 48 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000000000000000000000000100";
        when 49 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000000000000000000010000000";
        when 50 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000000000000001000000000000";
        when 51 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000000000100000000000000000";
        when 52 => dout_flgs <= "00000000000000000000000000000000000000000000000000000000010000000000000000000000";
        when 53 => dout_flgs <= "00000000000000000000000000000000000000000000000000001000000000000000000000000000";
        when 54 => dout_flgs <= "00000000000000000000000000000000000000000000000100000000000000000000000000000000";
        when 55 => dout_flgs <= "00000000000000000000000000000000000000000010000000000000000000000000000000000000";
        when 56 => dout_flgs <= "00000000000000000000000000000000000001000000000000000000000000000000000000000000";
        when 57 => dout_flgs <= "00000000000000000000000000000000100000000000000000000000000000000000000000000000";
        when 58 => dout_flgs <= "00000000000000000000000000010000000000000000000000000000000000000000000000000000";
        when 59 => dout_flgs <= "00000000000000000000001000000000000000000000000000000000000000000000000000000000";
        when 60 => dout_flgs <= "00000000000000000100000000000000000000000000000000000000000000000000000000000000";
        when 61 => dout_flgs <= "00000000000010000000000000000000000000000000000000000000000000000000000000000000";
        when 62 => dout_flgs <= "00000001000000000000000000000000000000000000000000000000000000000000000000000000";
        when others => dout_flgs <= "00100000000000000000000000000000000000000000000000000000000000000000000000000000";
    end case;
end process TOP_JPEG_INSTANCE_ROM_FLGS_READ;


TOP_JPEG_INSTANCE_RAM_RT_WRITE: process (clk) is
begin
    if rising_edge(clk) then
        if bool(we_rt) then
            instance_ram_rt_mem(to_integer(addr_rt)) <= din_rt;
        end if;
    end if;
end process TOP_JPEG_INSTANCE_RAM_RT_WRITE;



dout_rt <= instance_ram_rt_mem(to_integer(addr_rt));

end architecture MyHDL;
