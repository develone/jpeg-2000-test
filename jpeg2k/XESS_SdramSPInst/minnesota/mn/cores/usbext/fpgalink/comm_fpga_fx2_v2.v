// File: comm_fpga_fx2_v2.v
// Generated by MyHDL 0.9dev
// Date: Sat Jul 13 22:29:39 2013


`timescale 1ns/10ps

module comm_fpga_fx2_v2 (
    clk_in,
    reset_in,
    fx2FifoSel_out,
    fx2Data_in,
    fx2Data_out,
    fx2Data_sel,
    fx2Read_out,
    fx2GotData_in,
    fx2Write_out,
    fx2GotRoom_in,
    fx2PktEnd_out,
    chanAddr_out,
    h2fData_out,
    h2fValid_out,
    h2fReady_in,
    f2hData_in,
    f2hValid_in,
    f2hReady_out
);
// Original port definition
// This module bridges the "original" port mapping to the MyHDL
// version.    

input clk_in;
input reset_in;
output fx2FifoSel_out;
reg fx2FifoSel_out;
input [7:0] fx2Data_in;
output [7:0] fx2Data_out;
reg [7:0] fx2Data_out;
output fx2Data_sel;
reg fx2Data_sel;
input fx2Read_out;
input fx2GotData_in;
input fx2Write_out;
input fx2GotRoom_in;
input fx2PktEnd_out;
input [6:0] chanAddr_out;
input [7:0] h2fData_out;
input h2fValid_out;
input h2fReady_in;
input [7:0] f2hData_in;
input f2hValid_in;
input f2hReady_out;

reg [6:0] g_fl_bus_chan_addr;
wire g_fx2_bus_read;
reg g_is_write;
reg [3:0] g_state;
wire [7:0] g_fl_bus_data_i;
wire g_fx2_bus_gotroom;
reg [7:0] g_fl_bus_data_o;
wire g_fl_bus_ready_i;
reg g_fl_bus_ready_o;
reg g_is_aligned;
reg [31:0] g_count;
reg [1:0] g_fifop;
reg g_fl_bus_valid_o;
wire g_fx2_bus_write;
wire g_fl_bus_valid_i;
wire g_fx2_bus_gotdata;
reg g_fx2_bus_pktend;


assign g_fl_bus_data_i = 0;
assign g_fx2_bus_gotroom = 0;
assign g_fl_bus_ready_i = 0;
assign g_fl_bus_valid_i = 0;
assign g_fx2_bus_gotdata = 0;



always @(posedge clk_in, negedge reset_in) begin: COMM_FPGA_FX2_V2_G_HDL_SM
    if (reset_in == 0) begin
        g_count <= 0;
        g_fl_bus_chan_addr <= 0;
        fx2Data_out <= 0;
        fx2FifoSel_out <= 0;
        g_fifop <= 3;
        g_is_write <= 0;
        g_fl_bus_ready_o <= 0;
        fx2Data_sel <= 0;
        g_fl_bus_valid_o <= 0;
        g_state <= 4'b0000;
        g_fx2_bus_pktend <= 0;
        g_fl_bus_data_o <= 0;
        g_is_aligned <= 0;
    end
    else begin
        case (g_state)
            4'b0001: begin
                if (g_fx2_bus_gotdata) begin
                    g_count <= (fx2Data_in << 24);
                    g_state <= 4'b0010;
                end
                else begin
                    g_count <= 0;
                end
            end
            4'b0010: begin
                if (g_fx2_bus_gotdata) begin
                    g_count <= (g_count | (fx2Data_in << 16));
                    g_state <= 4'b0011;
                end
            end
            4'b0011: begin
                if (g_fx2_bus_gotdata) begin
                    g_count <= (g_count | (fx2Data_in << 8));
                    g_state <= 4'b0100;
                end
            end
            4'b0100: begin
                if (g_fx2_bus_gotdata) begin
                    g_count <= (g_count | fx2Data_in);
                    if (g_is_write) begin
                        g_state <= 4'b0101;
                    end
                    else begin
                        if (g_fl_bus_ready_i) begin
                            g_fifop <= 2;
                            g_state <= 4'b1001;
                        end
                        else begin
                            g_fifop <= 3;
                            g_state <= 4'b1010;
                        end
                    end
                end
            end
            4'b0101: begin
                fx2FifoSel_out <= 1;
                g_fifop <= 3;
                if ((g_count[9-1:0] == 0)) begin
                    g_is_aligned <= 1'b1;
                end
                else begin
                    g_is_aligned <= 1'b0;
                end
                g_state <= 4'b0110;
            end
            4'b0110: begin
                if (g_fx2_bus_gotroom) begin
                    g_fl_bus_ready_o <= 1'b1;
                end
                if ((g_fx2_bus_gotroom && g_fl_bus_valid_i)) begin
                    g_fifop <= 1;
                    fx2Data_out <= g_fl_bus_data_i;
                    fx2Data_sel <= 1'b1;
                    g_count <= (g_count - 1);
                    if ((g_count == 1)) begin
                        if (g_is_aligned) begin
                            g_state <= 4'b0111;
                        end
                        else begin
                            g_state <= 4'b1000;
                        end
                    end
                end
                else begin
                    g_fifop <= 3;
                end
            end
            4'b0111: begin
                fx2FifoSel_out <= 1;
                g_fifop <= 3;
                g_state <= 4'b0000;
            end
            4'b1000: begin
                fx2FifoSel_out <= 1;
                g_fifop <= 3;
                g_fx2_bus_pktend <= 1'b0;
                g_state <= 4'b0000;
            end
            4'b1001: begin
                fx2FifoSel_out <= 0;
                if ((g_fx2_bus_gotdata && g_fl_bus_ready_i)) begin
                    if ((!g_fx2_bus_read) !== 1) begin
                        $display("*** AssertionError ***");
                    end
                    g_fl_bus_valid_o <= 1'b1;
                    g_fl_bus_data_o <= fx2Data_in;
                    if ((g_count <= 1)) begin
                        g_state <= 4'b0000;
                        g_count <= 0;
                    end
                    else begin
                        g_count <= (g_count - 1);
                    end
                end
            end
            4'b1010: begin
                if ((g_fx2_bus_gotdata && g_fl_bus_ready_i)) begin
                    g_state <= 4'b1001;
                    g_fifop <= 2;
                end
            end
            default: begin
                g_fifop <= 2;
                g_count <= 0;
                g_fl_bus_valid_o <= 1'b0;
                if (g_fx2_bus_gotdata) begin
                    g_fl_bus_chan_addr <= fx2Data_in[7-1:0];
                    g_is_write <= fx2Data_in[7];
                    g_state <= 4'b0001;
                end
            end
        endcase
    end
end



assign g_fx2_bus_read = g_fifop[0];
assign g_fx2_bus_write = g_fifop[1];

endmodule
