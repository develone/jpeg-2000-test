-- File: xess_jpeg_top.vhd
-- Generated by MyHDL 0.9dev
-- Date: Thu Dec 11 04:09:51 2014



package pck_xess_jpeg_top is

attribute enum_encoding: string;

    type t_enum_t_State_1 is (
    INIT,
    WRITE,
    READ_AND_SUM_DATA,
    CK_SDRAM_RD,
    CK_SDRAM_WR,
    ODD_SAMPLES,
    EVEN_SAMPLES,
    WR_DATA,
    INTERLACE,
    DONE
);
attribute enum_encoding of t_enum_t_State_1: type is "0000000001 0000000010 0000000100 0000001000 0000010000 0000100000 0001000000 0010000000 0100000000 1000000000";

end package pck_xess_jpeg_top;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_09.all;

use work.pck_xess_jpeg_top.all;

entity xess_jpeg_top is
    port (
        clk_fast: in std_logic;
        addr_r: out unsigned(22 downto 0);
        addr_x: inout unsigned(22 downto 0);
        state_r: inout t_enum_t_State_1;
        state_x: inout t_enum_t_State_1;
        addr_r1: inout unsigned(22 downto 0);
        addr_r2: inout unsigned(22 downto 0);
        dataToRam_r: inout unsigned(15 downto 0);
        dataToRam_x: inout unsigned(15 downto 0);
        dataFromRam_r: out unsigned(15 downto 0);
        dataFromRam_r1: inout unsigned(15 downto 0);
        dataFromRam_r2: in unsigned(15 downto 0);
        dataFromRam_x: inout unsigned(15 downto 0);
        sig_in: inout unsigned(51 downto 0);
        noupdate_s: out std_logic;
        res_s: out signed (15 downto 0);
        jp_lf: inout unsigned(15 downto 0);
        jp_sa: inout unsigned(15 downto 0);
        jp_rh: inout unsigned(15 downto 0);
        jp_flgs: in unsigned(3 downto 0);
        reset_col: in std_logic;
        rdy: in std_logic;
        addr_not_reached: inout std_logic;
        offset: in unsigned(22 downto 0);
        dataFromRam_s: in unsigned(15 downto 0);
        done_s: in std_logic;
        wr_s: out std_logic;
        rd_s: out std_logic;
        sum_r: inout unsigned(15 downto 0);
        sum_x: inout unsigned(15 downto 0);
        dout_res_r: out unsigned(15 downto 0);
        dout_res_r1: inout unsigned(15 downto 0);
        dout_res_r2: inout unsigned(15 downto 0);
        dout_res_x: inout unsigned(15 downto 0);
        din_res_r: inout unsigned(15 downto 0);
        din_res_x: inout unsigned(15 downto 0);
        addr_res_r: inout unsigned(8 downto 0);
        addr_res_x: inout unsigned(8 downto 0);
        we_res: inout std_logic;
        muxsel_r: inout std_logic;
        muxsel_x: inout std_logic
    );
end entity xess_jpeg_top;


architecture MyHDL of xess_jpeg_top is


constant YES: integer := 1;
constant NO: integer := 0;



type t_array_instance_8_mem is array(0 to 256-1) of unsigned(15 downto 0);
signal instance_8_mem: t_array_instance_8_mem;

begin




XESS_JPEG_TOP_INSTANCE_2_MUXLOGIC: process (dout_res_r2, dout_res_r1, addr_r1, addr_r2, dataFromRam_r2, dataFromRam_r1, muxsel_r) is
begin
    addr_r <= addr_r1;
    dataFromRam_r <= dataFromRam_r1;
    dout_res_r <= dout_res_r1;
    if (muxsel_r = '1') then
        addr_r <= addr_r2;
        dataFromRam_r <= dataFromRam_r2;
        dout_res_r <= dout_res_r2;
    end if;
end process XESS_JPEG_TOP_INSTANCE_2_MUXLOGIC;


XESS_JPEG_TOP_INSTANCE_3_JPEG: process (clk_fast) is
begin
    if rising_edge(clk_fast) then
        if bool(sig_in(50)) then
            noupdate_s <= '0';
            if bool(sig_in(48)) then
                if bool(sig_in(49)) then
                    res_s <= signed(sig_in(32-1 downto 16) - (shift_right(sig_in(16-1 downto 0), 1) + shift_right(sig_in(48-1 downto 32), 1)));
                else
                    res_s <= signed(sig_in(32-1 downto 16) + (shift_right(sig_in(16-1 downto 0), 1) + shift_right(sig_in(48-1 downto 32), 1)));
                end if;
            else
                if bool(sig_in(49)) then
                    res_s <= signed(sig_in(32-1 downto 16) + shift_right(((sig_in(16-1 downto 0) + sig_in(48-1 downto 32)) + 2), 2));
                else
                    res_s <= signed(sig_in(32-1 downto 16) - shift_right(((sig_in(16-1 downto 0) + sig_in(48-1 downto 32)) + 2), 2));
                end if;
            end if;
        else
            noupdate_s <= '1';
        end if;
    end if;
end process XESS_JPEG_TOP_INSTANCE_3_JPEG;


XESS_JPEG_TOP_INSTANCE_4_SDRAM_RD: process (clk_fast) is
begin
    if rising_edge(clk_fast) then
        if bool(reset_col) then
            jp_lf <= to_unsigned(0, 16);
            jp_sa <= to_unsigned(0, 16);
            jp_rh <= to_unsigned(0, 16);
            addr_not_reached <= '0';
            if (jp_flgs(0) = '1') then
                addr_r2 <= (1 + offset);
            else
                addr_r2 <= (0 + offset);
            end if;
        else
            if bool(jp_flgs(0)) then
                if (addr_r2 = (1 + offset)) then
                    jp_lf <= dataFromRam_s;
                    addr_r2 <= (addr_r2 + 16);
                else
                    if (addr_r2 = (17 + offset)) then
                        jp_sa <= dataFromRam_s;
                        addr_r2 <= (addr_r2 + 16);
                    else
                        if (addr_r2 = (33 + offset)) then
                            jp_rh <= dataFromRam_s;
                            addr_not_reached <= '1';
                        end if;
                    end if;
                end if;
            elsif (addr_r2 = (0 + offset)) then
                jp_lf <= dataFromRam_s;
                addr_r2 <= (addr_r2 + 16);
            else
                if (addr_r2 = (16 + offset)) then
                    jp_sa <= dataFromRam_s;
                    addr_r2 <= (addr_r2 + 16);
                else
                    if (addr_r2 = (32 + offset)) then
                        jp_rh <= dataFromRam_s;
                        addr_not_reached <= '1';
                    end if;
                end if;
            end if;
        end if;
    end if;
end process XESS_JPEG_TOP_INSTANCE_4_SDRAM_RD;


XESS_JPEG_TOP_INSTANCE_5_RAM2SIG: process (jp_sa, jp_flgs, jp_rh, rdy, addr_not_reached, jp_lf) is
begin
    if bool(rdy) then
        if bool(addr_not_reached) then
            sig_in <= unsigned'(jp_flgs & jp_rh & jp_sa & jp_lf);
        else
            sig_in <= to_unsigned(0, 52);
        end if;
    else
        sig_in <= to_unsigned(0, 52);
    end if;
end process XESS_JPEG_TOP_INSTANCE_5_RAM2SIG;


XESS_JPEG_TOP_INSTANCE_6_FSM: process (addr_r1, din_res_r, sum_r, dout_res_r1, dataFromRam_r1, addr_res_r, dataFromRam_s, done_s, dataToRam_r, state_r, muxsel_r) is
begin
    muxsel_x <= muxsel_r;
    dout_res_x <= dout_res_r1;
    din_res_x <= din_res_r;
    addr_res_x <= addr_res_r;
    addr_x <= addr_r1;
    state_x <= state_r;
    sum_x <= sum_r;
    wr_s <= '0';
    rd_s <= '0';
    dataToRam_x <= dataToRam_r;
    dataFromRam_x <= dataFromRam_r1;
    case state_r is
        when INIT =>
            addr_x <= to_unsigned(131072, 23);
            dataToRam_x <= to_unsigned(1, 16);
            addr_res_x <= to_unsigned(0, 9);
            muxsel_x <= '0';
            state_x <= WRITE;
        when WRITE =>
            if (done_s = '0') then
                wr_s <= '1';
            elsif (addr_r1 <= 131088) then
                addr_x <= (addr_r1 + 1);
                dataToRam_x <= (dataToRam_r + 3);
            else
                addr_x <= to_unsigned(131072, 23);
                addr_res_x <= to_unsigned(0, 9);
                we_res <= '1';
                sum_x <= to_unsigned(0, 16);
                state_x <= READ_AND_SUM_DATA;
            end if;
        when READ_AND_SUM_DATA =>
            if (done_s = '0') then
                rd_s <= '1';
            elsif (addr_r1 <= 131088) then
                dout_res_x <= dataFromRam_s;
                sum_x <= (sum_r + dataFromRam_s);
                addr_res_x <= (addr_res_r + 1);
                addr_x <= (addr_r1 + 1);
                if (addr_r1 = 131088) then
                    muxsel_x <= '1';
                    we_res <= '0';
                    state_x <= DONE;
                end if;
            end if;
        when CK_SDRAM_RD =>
            if (done_s = '0') then
                rd_s <= '1';
                we_res <= '1';
            else
                if (addr_r1 <= 256) then
                    addr_x <= (addr_r1 + 1);
                    addr_res_x <= (addr_res_r + 1);
                    dout_res_x <= dataFromRam_s;
                else
                    sum_x <= dataFromRam_s;
                    addr_x <= to_unsigned(131072, 23);
                    addr_res_x <= to_unsigned(0, 9);
                    wr_s <= '0';
                    we_res <= '0';
                    state_x <= CK_SDRAM_WR;
                end if;
            end if;
        when CK_SDRAM_WR =>
            if (addr_res_r <= 255) then
                dataFromRam_x <= din_res_r;
                addr_x <= (addr_r1 + 1);
            else
                state_x <= DONE;
            end if;
        when ODD_SAMPLES =>
            if (addr_r1 = 1) then
                addr_x <= to_unsigned(2, 23);
                state_x <= DONE;
            end if;
        when EVEN_SAMPLES =>
            if (done_s = '0') then
                rd_s <= '1';
            else
                if (addr_r1 <= 505) then
                    addr_x <= (addr_r1 + 256);
                else
                    state_x <= DONE;
                end if;
            end if;
        when WR_DATA =>
            if (addr_r1 = 1) then
                addr_x <= to_unsigned(8, 23);
            else
                state_x <= DONE;
            end if;
        when INTERLACE =>
            if (addr_r1 = 16) then
                state_x <= DONE;
            end if;
        when others => -- DONE
            if (addr_r1 = 1) then
                state_x <= INIT;
            end if;
    end case;
end process XESS_JPEG_TOP_INSTANCE_6_FSM;


XESS_JPEG_TOP_INSTANCE_7_FSMUPDATE: process (clk_fast) is
begin
    if rising_edge(clk_fast) then
        muxsel_r <= muxsel_x;
        din_res_r <= din_res_x;
        dout_res_r1 <= dout_res_x;
        addr_res_r <= addr_res_x;
        addr_r1 <= addr_x;
        dataToRam_r <= dataToRam_x;
        dataFromRam_r1 <= dataFromRam_x;
        state_r <= state_x;
        sum_r <= sum_x;
    end if;
end process XESS_JPEG_TOP_INSTANCE_7_FSMUPDATE;


XESS_JPEG_TOP_INSTANCE_8_WRITE: process (clk_fast) is
begin
    if rising_edge(clk_fast) then
        if bool(we_res) then
            instance_8_mem(to_integer(addr_res_r)) <= din_res_r;
        end if;
    end if;
end process XESS_JPEG_TOP_INSTANCE_8_WRITE;



dout_res_r2 <= instance_8_mem(to_integer(addr_res_r));

end architecture MyHDL;
