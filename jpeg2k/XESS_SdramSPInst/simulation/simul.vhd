-- File: simul.vhd
-- Generated by MyHDL 0.9dev
-- Date: Sun Dec  7 18:12:52 2014



package pck_simul is

attribute enum_encoding: string;

    type t_enum_t_State_1 is (
    INIT,
    CK_SDRAM,
    ODD_SAMPLES,
    EVEN_SAMPLES,
    WR_DATA,
    INTERLACE,
    DONE
);
attribute enum_encoding of t_enum_t_State_1: type is "0000001 0000010 0000100 0001000 0010000 0100000 1000000";

end package pck_simul;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_09.all;

use work.pck_simul.all;

entity simul is
    port (
        clk_fast: in std_logic;
        addr_r: out unsigned(23 downto 0);
        addr_r1: inout unsigned(23 downto 0);
        addr_x: inout unsigned(23 downto 0);
        state_r: inout t_enum_t_State_1;
        state_x: inout t_enum_t_State_1;
        addr_r2: in unsigned(23 downto 0);
        muxsel: in std_logic;
        dataToRam_r: inout unsigned(15 downto 0);
        dataToRam_x: inout unsigned(15 downto 0);
        dataFromRam_r: out unsigned(15 downto 0);
        dataFromRam_r1: inout unsigned(15 downto 0);
        dataFromRam_r2: in unsigned(15 downto 0);
        dataFromRam_x: inout unsigned(15 downto 0);
        dataFromRam_s: in unsigned(15 downto 0);
        done_s: in std_logic;
        wr_s: out std_logic;
        rd_s: out std_logic;
        sum_r: inout unsigned(15 downto 0);
        sum_x: inout unsigned(15 downto 0)
    );
end entity simul;


architecture MyHDL of simul is


constant YES: integer := 1;
constant NO: integer := 0;




begin




SIMUL_INSTANCE_2_MUXLOGIC: process (muxsel, dataFromRam_r2, addr_r1, addr_r2) is
begin
    addr_r <= addr_r1;
    if (muxsel = '1') then
        addr_r <= addr_r2;
        dataFromRam_r <= dataFromRam_r2;
    end if;
end process SIMUL_INSTANCE_2_MUXLOGIC;


SIMUL_INSTANCE_6_FSM: process (addr_r1, dataFromRam_r1, state_r, dataFromRam_s, done_s, dataToRam_r, sum_r) is
begin
    addr_x <= addr_r1;
    state_x <= state_r;
    sum_x <= sum_r;
    wr_s <= '0';
    rd_s <= '0';
    dataToRam_x <= dataToRam_r;
    dataFromRam_x <= dataFromRam_r1;
    case state_r is
        when INIT =>
            addr_x <= to_unsigned(1, 24);
            state_x <= CK_SDRAM;
        when CK_SDRAM =>
            if (done_s = '0') then
                rd_s <= '1';
            else
                if (addr_r1 <= 5) then
                    addr_x <= (addr_r1 + 1);
                    sum_x <= resize(sum_r + (dataFromRam_s * addr_r1), 16);
                else
                    addr_x <= to_unsigned(2, 24);
                    state_x <= EVEN_SAMPLES;
                end if;
            end if;
        when ODD_SAMPLES =>
            if (addr_r1 = 1) then
                addr_x <= to_unsigned(2, 24);
                state_x <= EVEN_SAMPLES;
            end if;
        when EVEN_SAMPLES =>
            if (done_s = '0') then
                rd_s <= '1';
            else
                if (addr_r1 <= 505) then
                    addr_x <= (addr_r1 + 256);
                else
                    state_x <= WR_DATA;
                end if;
            end if;
        when WR_DATA =>
            if (addr_r1 = 1) then
                addr_x <= to_unsigned(8, 24);
            else
                state_x <= INTERLACE;
            end if;
        when INTERLACE =>
            if (addr_r1 = 16) then
                state_x <= DONE;
            end if;
        when others => -- DONE
            if (addr_r1 = 1) then
                state_x <= INIT;
            end if;
    end case;
end process SIMUL_INSTANCE_6_FSM;


SIMUL_INSTANCE_7_FSMUPDATE: process (clk_fast) is
begin
    if rising_edge(clk_fast) then
        addr_r1 <= addr_x;
        dataToRam_r <= dataToRam_x;
        dataFromRam_r1 <= dataFromRam_x;
        state_r <= state_x;
        sum_r <= sum_x;
    end if;
end process SIMUL_INSTANCE_7_FSMUPDATE;

end architecture MyHDL;
