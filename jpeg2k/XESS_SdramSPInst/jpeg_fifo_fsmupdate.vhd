-- File: jpeg_fifo_fsmupdate.vhd
-- Generated by MyHDL 0.9dev
-- Date: Thu Dec 18 10:06:29 2014


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_09.all;

entity jpeg_fifo_fsmupdate is
    port (
        clk_fast: in std_logic;
        empty_r: out std_logic;
        full_r: out std_logic;
        enr_r: inout std_logic;
        enw_r: inout std_logic;
        dataout_r: out unsigned(15 downto 0);
        datain_r: out unsigned(15 downto 0);
        empty_x: inout std_logic;
        full_x: inout std_logic;
        enr_x: in std_logic;
        enw_x: in std_logic;
        dataout_x: inout unsigned(15 downto 0);
        datain_x: in unsigned(15 downto 0)
    );
end entity jpeg_fifo_fsmupdate;


architecture MyHDL of jpeg_fifo_fsmupdate is


constant YES: integer := 1;
constant NO: integer := 0;



signal instance_1_writeptr: unsigned(7 downto 0):="00000000";
signal instance_1_readptr: unsigned(7 downto 0):="00000000";
type t_array_instance_1_mem is array(0 to 256-1) of unsigned(15 downto 0);
signal instance_1_mem: t_array_instance_1_mem;

begin




JPEG_FIFO_FSMUPDATE_INSTANCE_1_RTL: process (clk_fast) is
begin
    if rising_edge(clk_fast) then
        if (enr_r = '1') then
            dataout_x <= instance_1_mem(to_integer(instance_1_readptr));
            instance_1_readptr <= (instance_1_readptr + 1);
        end if;
        if (enw_r = '1') then
            instance_1_mem(to_integer(instance_1_writeptr)) <= datain_x;
            instance_1_writeptr <= (instance_1_writeptr + 1);
        end if;
        if (instance_1_readptr = 255) then
            instance_1_readptr <= to_unsigned(0, 8);
        end if;
        if (instance_1_writeptr = 255) then
            full_x <= '1';
            instance_1_writeptr <= to_unsigned(0, 8);
        else
            full_x <= '0';
        end if;
        if (instance_1_writeptr = 0) then
            empty_x <= '1';
        else
            empty_x <= '0';
        end if;
    end if;
end process JPEG_FIFO_FSMUPDATE_INSTANCE_1_RTL;


JPEG_FIFO_FSMUPDATE_INSTANCE_2_FSMUPDATE: process (clk_fast) is
begin
    if rising_edge(clk_fast) then
        empty_r <= empty_x;
        full_r <= full_x;
        enr_r <= enr_x;
        enw_r <= enw_x;
        dataout_r <= dataout_x;
        datain_r <= datain_x;
    end if;
end process JPEG_FIFO_FSMUPDATE_INSTANCE_2_FSMUPDATE;

end architecture MyHDL;
