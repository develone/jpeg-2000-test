-- File: jpeg_top.vhd
-- Generated by MyHDL 0.9dev
-- Date: Fri Dec  5 13:59:28 2014


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_09.all;

entity jpeg_top is
    port (
        clk_fast: in std_logic;
        addr_r: out unsigned(23 downto 0);
        addr_x: in unsigned(23 downto 0);
        addr_r1: inout unsigned(23 downto 0);
        addr_r2: inout unsigned(23 downto 0);
        muxsel: in std_logic;
        dataToRam_r: out unsigned(15 downto 0);
        dataToRam_x: in unsigned(15 downto 0);
        sig_in: inout unsigned(51 downto 0);
        noupdate_s: out std_logic;
        res_s: out signed (15 downto 0);
        jp_lf: inout unsigned(15 downto 0);
        jp_sa: inout unsigned(15 downto 0);
        jp_rh: inout unsigned(15 downto 0);
        jp_flgs: in unsigned(3 downto 0);
        reset_col: in std_logic;
        rdy: in std_logic;
        addr_not_reached: inout std_logic;
        offset: in unsigned(23 downto 0);
        dataFromRam_s: in unsigned(15 downto 0)
    );
end entity jpeg_top;


architecture MyHDL of jpeg_top is






begin




JPEG_TOP_INSTANCE_2_MUXLOGIC: process (muxsel, addr_r1, addr_r2) is
begin
    addr_r <= addr_r1;
    if (muxsel = '1') then
        addr_r <= addr_r2;
    end if;
end process JPEG_TOP_INSTANCE_2_MUXLOGIC;


JPEG_TOP_INSTANCE_3_JPEG: process (clk_fast) is
begin
    if rising_edge(clk_fast) then
        if bool(sig_in(50)) then
            noupdate_s <= '0';
            if bool(sig_in(48)) then
                if bool(sig_in(49)) then
                    res_s <= signed(sig_in(32-1 downto 16) - (shift_right(sig_in(16-1 downto 0), 1) + shift_right(sig_in(48-1 downto 32), 1)));
                else
                    res_s <= signed(sig_in(32-1 downto 16) + (shift_right(sig_in(16-1 downto 0), 1) + shift_right(sig_in(48-1 downto 32), 1)));
                end if;
            else
                if bool(sig_in(49)) then
                    res_s <= signed(sig_in(32-1 downto 16) + shift_right(((sig_in(16-1 downto 0) + sig_in(48-1 downto 32)) + 2), 2));
                else
                    res_s <= signed(sig_in(32-1 downto 16) - shift_right(((sig_in(16-1 downto 0) + sig_in(48-1 downto 32)) + 2), 2));
                end if;
            end if;
        else
            noupdate_s <= '1';
        end if;
    end if;
end process JPEG_TOP_INSTANCE_3_JPEG;


JPEG_TOP_INSTANCE_4_SDRAM_RD: process (clk_fast) is
begin
    if rising_edge(clk_fast) then
        if bool(reset_col) then
            jp_lf <= to_unsigned(0, 16);
            jp_sa <= to_unsigned(0, 16);
            jp_rh <= to_unsigned(0, 16);
            addr_not_reached <= '0';
            if (jp_flgs(0) = '1') then
                addr_r2 <= (1 + offset);
            else
                addr_r2 <= (0 + offset);
            end if;
        else
            if bool(jp_flgs(0)) then
                if (addr_r2 = (1 + offset)) then
                    jp_lf <= dataFromRam_s;
                    addr_r2 <= (addr_r2 + 16);
                else
                    if (addr_r2 = (17 + offset)) then
                        jp_sa <= dataFromRam_s;
                        addr_r2 <= (addr_r2 + 16);
                    else
                        if (addr_r2 = (33 + offset)) then
                            jp_rh <= dataFromRam_s;
                            addr_not_reached <= '1';
                        end if;
                    end if;
                end if;
            elsif (addr_r2 = (0 + offset)) then
                jp_lf <= dataFromRam_s;
                addr_r2 <= (addr_r2 + 16);
            else
                if (addr_r2 = (16 + offset)) then
                    jp_sa <= dataFromRam_s;
                    addr_r2 <= (addr_r2 + 16);
                else
                    if (addr_r2 = (32 + offset)) then
                        jp_rh <= dataFromRam_s;
                        addr_not_reached <= '1';
                    end if;
                end if;
            end if;
        end if;
    end if;
end process JPEG_TOP_INSTANCE_4_SDRAM_RD;


JPEG_TOP_INSTANCE_5_RAM2SIG: process (jp_sa, jp_flgs, jp_rh, rdy, addr_not_reached, jp_lf) is
begin
    if bool(rdy) then
        if bool(addr_not_reached) then
            sig_in <= unsigned'(jp_flgs & jp_rh & jp_sa & jp_lf);
        else
            sig_in <= to_unsigned(0, 52);
        end if;
    else
        sig_in <= to_unsigned(0, 52);
    end if;
end process JPEG_TOP_INSTANCE_5_RAM2SIG;


JPEG_TOP_INSTANCE_7_FSMUPDATE: process (clk_fast) is
begin
    if rising_edge(clk_fast) then
        addr_r1 <= addr_x;
        dataToRam_r <= dataToRam_x;
    end if;
end process JPEG_TOP_INSTANCE_7_FSMUPDATE;

end architecture MyHDL;
