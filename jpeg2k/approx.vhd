-- File: approx.vhd
-- Generated by MyHDL 0.9dev
-- Date: Tue Oct  7 12:14:50 2014


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_09.all;

entity approx is
    port (
        clk_fast: in std_logic;
        even_odd_s: out std_logic;
        left_s: out signed (15 downto 0);
        sam_s: out signed (15 downto 0);
        right_s: out signed (15 downto 0);
        we_lf: out std_logic;
        we_sam: out std_logic;
        we_rht: out std_logic;
        we_res: out std_logic;
        addr_lf: inout unsigned(8 downto 0);
        addr_sam: inout unsigned(8 downto 0);
        addr_rht: inout unsigned(8 downto 0);
        addr_res: inout unsigned(8 downto 0);
        dout_lf: in unsigned(15 downto 0);
        dout_sam: in unsigned(15 downto 0);
        dout_rht: in unsigned(15 downto 0);
        odd: in std_logic;
        reset_jpeg: in std_logic;
        updated_s: inout std_logic
    );
end entity approx;


architecture MyHDL of approx is






begin




APPROX_XX: process (clk_fast) is
begin
    if rising_edge(clk_fast) then
        if bool(reset_jpeg) then
            updated_s <= '0';
            we_lf <= '0';
            we_sam <= '0';
            we_rht <= '0';
            we_res <= '1';
            if bool(odd) then
                addr_lf <= to_unsigned(1, 9);
                addr_sam <= to_unsigned(1, 9);
                addr_rht <= to_unsigned(1, 9);
                addr_res <= to_unsigned(1, 9);
                even_odd_s <= '0';
            else
                addr_lf <= to_unsigned(2, 9);
                addr_sam <= to_unsigned(2, 9);
                addr_rht <= to_unsigned(2, 9);
                addr_res <= to_unsigned(2, 9);
                even_odd_s <= '1';
            end if;
        else
            if (addr_res <= 64) then
                left_s <= signed(dout_lf);
                sam_s <= signed(dout_sam);
                right_s <= signed(dout_rht);
                updated_s <= '1';
                if (updated_s = '0') then
                    addr_lf <= (addr_lf + 2);
                    addr_sam <= (addr_sam + 2);
                    addr_rht <= (addr_rht + 2);
                    addr_res <= (addr_res + 2);
                end if;
            end if;
        end if;
    end if;
end process APPROX_XX;

end architecture MyHDL;
