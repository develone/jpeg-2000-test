// File: jpeg_top.v
// Generated by MyHDL 0.9dev
// Date: Thu Nov 13 16:45:16 2014


`timescale 1ns/10ps

module jpeg_top (
    clk_fast,
    offset,
    dataFromRam_s,
    addr_r,
    jp_lf,
    jp_sa,
    jp_rh,
    jp_flgs,
    reset_n,
    rdy,
    sig_in,
    noupdate_s,
    res_s,
    state_r,
    state_x,
    reset_fsm_r,
    addr_res,
    offset_r,
    addr_not_reached,
    addr_rom_r,
    dataToRam_r,
    addr_sdram,
    wr_s,
    rst,
    eog,
    rst_file_in,
    addr_r1,
    addr_r2,
    sel,
    y
);


input clk_fast;
output [11:0] offset;
reg [11:0] offset;
input [15:0] dataFromRam_s;
output [5:0] addr_r;
reg [5:0] addr_r;
output [15:0] jp_lf;
reg [15:0] jp_lf;
output [15:0] jp_sa;
reg [15:0] jp_sa;
output [15:0] jp_rh;
reg [15:0] jp_rh;
output [3:0] jp_flgs;
reg [3:0] jp_flgs;
output reset_n;
reg reset_n;
output rdy;
reg rdy;
output [51:0] sig_in;
reg [51:0] sig_in;
output noupdate_s;
reg noupdate_s;
output signed [15:0] res_s;
reg signed [15:0] res_s;
output [5:0] state_r;
reg [5:0] state_r;
output [5:0] state_x;
reg [5:0] state_x;
input reset_fsm_r;
output [8:0] addr_res;
reg [8:0] addr_res;
output [11:0] offset_r;
reg [11:0] offset_r;
output addr_not_reached;
reg addr_not_reached;
output [5:0] addr_rom_r;
reg [5:0] addr_rom_r;
output [15:0] dataToRam_r;
reg [15:0] dataToRam_r;
output [5:0] addr_sdram;
reg [5:0] addr_sdram;
output wr_s;
reg wr_s;
output rst;
reg rst;
input eog;
input rst_file_in;
input [5:0] addr_r1;
input [5:0] addr_r2;
input sel;
input [15:0] y;

reg [8:0] addr_res_r;
reg [5:0] instance_7_addr_r;





always @(posedge clk_fast) begin: JPEG_TOP_INSTANCE_1_SDRAM_RD
    if (reset_n) begin
        jp_lf <= 0;
        jp_sa <= 0;
        jp_rh <= 0;
        addr_not_reached <= 0;
        if ((jp_flgs[0] == 1)) begin
            addr_sdram <= (1 + offset);
        end
        else begin
            addr_sdram <= (0 + offset);
        end
    end
    else begin
        if (jp_flgs[0]) begin
            if ((addr_sdram == (1 + offset))) begin
                jp_lf <= dataFromRam_s;
                addr_sdram <= (addr_sdram + 1);
            end
            else begin
                if ((addr_sdram == (2 + offset))) begin
                    jp_sa <= dataFromRam_s;
                    addr_sdram <= (addr_sdram + 1);
                end
                else begin
                    if ((addr_sdram == (3 + offset))) begin
                        jp_rh <= dataFromRam_s;
                        addr_not_reached <= 1;
                    end
                end
            end
        end
        else if ((addr_sdram == (0 + offset))) begin
            jp_lf <= dataFromRam_s;
            addr_sdram <= (addr_sdram + 1);
        end
        else begin
            if ((addr_sdram == (1 + offset))) begin
                jp_sa <= dataFromRam_s;
                addr_sdram <= (addr_sdram + 1);
            end
            else begin
                if ((addr_sdram == (2 + offset))) begin
                    jp_rh <= dataFromRam_s;
                    addr_not_reached <= 1;
                end
            end
        end
    end
end


always @(jp_sa, jp_flgs, jp_rh, rdy, addr_not_reached, jp_lf) begin: JPEG_TOP_INSTANCE_2_RAM2SIG
    if (rdy) begin
        if (addr_not_reached) begin
            sig_in = {jp_flgs, jp_rh, jp_sa, jp_lf};
        end
        else begin
            sig_in = 0;
        end
    end
    else begin
        sig_in = 0;
    end
end


always @(posedge clk_fast) begin: JPEG_TOP_INSTANCE_3_JPEG
    if (sig_in[50]) begin
        noupdate_s <= 0;
        if (sig_in[48]) begin
            if (sig_in[49]) begin
                res_s <= (sig_in[32-1:16] - ((sig_in[16-1:0] >>> 1) + (sig_in[48-1:32] >>> 1)));
            end
            else begin
                res_s <= (sig_in[32-1:16] + ((sig_in[16-1:0] >>> 1) + (sig_in[48-1:32] >>> 1)));
            end
        end
        else begin
            if (sig_in[49]) begin
                res_s <= (sig_in[32-1:16] + (((sig_in[16-1:0] + sig_in[48-1:32]) + 2) >>> 2));
            end
            else begin
                res_s <= (sig_in[32-1:16] - (((sig_in[16-1:0] + sig_in[48-1:32]) + 2) >>> 2));
            end
        end
    end
    else begin
        noupdate_s <= 1;
    end
end


always @(addr_res_r, addr_not_reached, reset_fsm_r, noupdate_s, state_r, offset_r) begin: JPEG_TOP_INSTANCE_4_FSM
    state_x = state_r;
    if ((reset_fsm_r == 0)) begin
        offset = offset_r;
        addr_res = addr_res_r;
        state_x = 6'b000001;
    end
    else begin
        casez (state_r)
            6'b?????1: begin
                reset_n = 1;
                rdy = 0;
                offset = 0;
                addr_res = 0;
                state_x = 6'b000100;
            end
            6'b????1?: begin
                rdy = 1;
                reset_n = 0;
                jp_flgs = 6;
                offset = offset_r;
                if ((offset_r <= 10)) begin
                    if (((noupdate_s != 1) && addr_not_reached)) begin
                        offset = (offset_r + 2);
                        addr_res = (addr_res_r + 2);
                        rdy = 1;
                        reset_n = 1;
                    end
                end
                else begin
                    // Setting up for next state
                    reset_n = 1;
                    rdy = 1;
                    offset = 1;
                    addr_res = 2;
                    state_x = 6'b000001;
                end
            end
            6'b???1??: begin
                rdy = 1;
                reset_n = 0;
                jp_flgs = 7;
                offset = offset_r;
                if ((offset_r <= 12)) begin
                    if (((noupdate_s != 1) && addr_not_reached)) begin
                        offset = (offset_r + 2);
                        addr_res = (addr_res_r + 2);
                        rdy = 1;
                        reset_n = 1;
                    end
                end
                else begin
                    // Need to setup for next state
                    rdy = 1;
                    reset_n = 1;
                    rdy = 0;
                    offset = 0;
                    addr_res = 0;
                    state_x = 6'b001000;
                end
            end
            6'b??1???: begin
                offset = offset_r;
                addr_res = 0;
                state_x = 6'b010000;
            end
            6'b?1????: begin
                reset_n = 1;
                rdy = 0;
                offset = 0;
                addr_res = 0;
                state_x = 6'b000010;
            end
            6'b1?????: begin
                state_x = 6'b000001;
            end
            default: begin
                $finish;
            end
        endcase
    end
end


always @(posedge clk_fast) begin: JPEG_TOP_INSTANCE_5_FSMUPDATE
    offset_r <= offset;
    state_r <= state_x;
    addr_res_r <= addr_res;
    addr_rom_r <= addr_sdram;
end


always @(negedge clk_fast) begin: JPEG_TOP_INSTANCE_7_FILE_RD
    if ((rst_file_in == 0)) begin
        rst <= 1;
        instance_7_addr_r <= 0;
        wr_s <= 1;
    end
    else begin
        if ((rst == 1)) begin
            rst <= 0;
        end
        else if ((eog == 0)) begin
            if ((instance_7_addr_r <= 48)) begin
                dataToRam_r <= y;
                instance_7_addr_r <= (instance_7_addr_r + 1);
            end
        end
        else begin
            wr_s <= 0;
        end
    end
end

endmodule
