// File: jpeg_top.v
// Generated by MyHDL 0.9dev
// Date: Fri Nov  7 13:15:01 2014


`timescale 1ns/10ps

module jpeg_top (
    clk_fast,
    offset,
    dout_rom,
    addr_rom,
    jp_lf,
    jp_sa,
    jp_rh,
    jp_flgs,
    reset_n,
    rdy,
    sig_in,
    noupdate_s,
    res_s,
    state_r,
    reset_fsm_r,
    addr_res,
    offset_r,
    addr_not_reached,
    sig_out_valid
);


input clk_fast;
output [11:0] offset;
reg [11:0] offset;
input [15:0] dout_rom;
output [11:0] addr_rom;
reg [11:0] addr_rom;
output [15:0] jp_lf;
reg [15:0] jp_lf;
output [15:0] jp_sa;
reg [15:0] jp_sa;
output [15:0] jp_rh;
reg [15:0] jp_rh;
output [3:0] jp_flgs;
reg [3:0] jp_flgs;
output reset_n;
reg reset_n;
output rdy;
reg rdy;
output [51:0] sig_in;
reg [51:0] sig_in;
output noupdate_s;
reg noupdate_s;
output signed [15:0] res_s;
reg signed [15:0] res_s;
output [3:0] state_r;
reg [3:0] state_r;
input reset_fsm_r;
output [8:0] addr_res;
reg [8:0] addr_res;
output [11:0] offset_r;
reg [11:0] offset_r;
output addr_not_reached;
reg addr_not_reached;
output sig_out_valid;
reg sig_out_valid;






always @(posedge clk_fast) begin: JPEG_TOP_INSTANCE_1_TEST_PROCESS
    if (reset_n) begin
        jp_lf <= 0;
        jp_sa <= 0;
        jp_rh <= 0;
        addr_not_reached <= 0;
        if ((jp_flgs[0] == 1)) begin
            addr_rom <= (1 + offset);
        end
        else begin
            addr_rom <= (0 + offset);
        end
    end
    else begin
        if (jp_flgs[0]) begin
            if ((addr_rom == (1 + offset))) begin
                jp_lf <= dout_rom;
                addr_rom <= (addr_rom + 1);
            end
            else begin
                if ((addr_rom == (2 + offset))) begin
                    jp_sa <= dout_rom;
                    addr_rom <= (addr_rom + 1);
                end
                else begin
                    if ((addr_rom == (3 + offset))) begin
                        jp_rh <= dout_rom;
                        addr_not_reached <= 1;
                    end
                end
            end
        end
        else if ((addr_rom == (0 + offset))) begin
            jp_lf <= dout_rom;
            addr_rom <= (addr_rom + 1);
        end
        else begin
            if ((addr_rom == (1 + offset))) begin
                jp_sa <= dout_rom;
                addr_rom <= (addr_rom + 1);
            end
            else begin
                if ((addr_rom == (2 + offset))) begin
                    jp_rh <= dout_rom;
                    addr_not_reached <= 1;
                end
            end
        end
    end
end


always @(jp_sa, jp_flgs, jp_rh, rdy, addr_not_reached, jp_lf) begin: JPEG_TOP_INSTANCE_2_LOGIC
    if (rdy) begin
        if (addr_not_reached) begin
            sig_in = {jp_flgs, jp_rh, jp_sa, jp_lf};
            sig_out_valid = 0;
        end
    end
    else begin
        sig_in = 0;
    end
end


always @(posedge clk_fast) begin: JPEG_TOP_INSTANCE_3_JPEG
    if (sig_in[50]) begin
        noupdate_s <= 0;
        if (sig_in[48]) begin
            if (sig_in[49]) begin
                res_s <= (sig_in[32-1:16] - ((sig_in[16-1:0] >>> 1) + (sig_in[48-1:32] >>> 1)));
            end
            else begin
                res_s <= (sig_in[32-1:16] + ((sig_in[16-1:0] >>> 1) + (sig_in[48-1:32] >>> 1)));
            end
        end
        else begin
            if (sig_in[49]) begin
                res_s <= (sig_in[32-1:16] + (((sig_in[16-1:0] + sig_in[48-1:32]) + 2) >>> 2));
            end
            else begin
                res_s <= (sig_in[32-1:16] - (((sig_in[16-1:0] + sig_in[48-1:32]) + 2) >>> 2));
            end
        end
    end
    else begin
        noupdate_s <= 1;
    end
end


always @(noupdate_s, state_r, addr_not_reached, offset_r, reset_fsm_r) begin: JPEG_TOP_INSTANCE_4_FSM
    if ((reset_fsm_r == 0)) begin
        addr_res = (offset_r + 1);
        // This is used for testing ODD_SA only 1 can be used for now
        offset = 0;
        // This is used for testing EVEN_SA only 1 can be used for now
        offset = 1;
        state_r = 4'b0001;
    end
    else begin
        casez (state_r)
            4'b???1: begin
                reset_n = 0;
                rdy = 0;
                offset = 0;
                // This is used for testing ODD_SA only 1 can be used for now
                state_r = 4'b0010;
                // This is used for testing EVEN_SA only 1 can be used for now
                state_r = 4'b0100;
            end
            4'b??1?: begin
                rdy = 1;
                jp_flgs = 6;
                offset = offset_r;
                if ((noupdate_s != 1)) begin
                    reset_n = 1;
                end
                if ((offset_r <= 4)) begin
                    if (((noupdate_s != 1) && addr_not_reached)) begin
                        offset = (offset_r + 2);
                        addr_res = (offset_r + 1);
                        rdy = 0;
                        // cut after 30 ns and paste in the line below
                        reset_n = 0;
                    end
                end
                else begin
                    // Need to setup for next state
                    state_r = 4'b0010;
                end
            end
            4'b?1??: begin
                rdy = 1;
                jp_flgs = 7;
                offset = offset_r;
                if ((noupdate_s != 1)) begin
                    reset_n = 1;
                end
                if ((offset_r <= 4)) begin
                    if (((noupdate_s != 1) && addr_not_reached)) begin
                        offset = (offset_r + 2);
                        addr_res = (offset_r + 1);
                        rdy = 0;
                        // cut after 30 ns and paste in the line below
                        reset_n = 0;
                    end
                end
                else begin
                    // Need to setup for next state
                    state_r = 4'b0100;
                end
            end
            4'b1???: begin
                state_r = 4'b0001;
            end
            default: begin
                $finish;
            end
        endcase
    end
end


always @(posedge clk_fast) begin: JPEG_TOP_INSTANCE_5_LOGIC
    offset_r <= offset;
end

endmodule
