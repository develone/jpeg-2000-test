-- File: jpeg_top.vhd
-- Generated by MyHDL 0.9dev
-- Date: Tue Nov  4 15:23:17 2014



package pck_jpeg_top is

attribute enum_encoding: string;

    type t_enum_t_State_1 is (
    ODD_SA,
    EVEN_SA,
    TRAN_RAM
);
attribute enum_encoding of t_enum_t_State_1: type is "001 010 100";

end package pck_jpeg_top;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_09.all;

use work.pck_jpeg_top.all;

entity jpeg_top is
    port (
        clk_fast: in std_logic;
        offset: inout unsigned(11 downto 0);
        dout_rom: in unsigned(15 downto 0);
        addr_rom: inout unsigned(11 downto 0);
        jp_lf: inout unsigned(15 downto 0);
        jp_sa: inout unsigned(15 downto 0);
        jp_rh: inout unsigned(15 downto 0);
        jp_flgs: inout unsigned(3 downto 0);
        reset_n: inout std_logic;
        rdy: inout std_logic;
        sig_out: out unsigned(51 downto 0);
        sig_in: in unsigned(51 downto 0);
        noupdate_s: out std_logic;
        res_s: out signed (15 downto 0);
        state_r: inout t_enum_t_State_1;
        reset_fsm_r: in std_logic;
        addr_res: out unsigned(8 downto 0);
        offset_r: in unsigned(11 downto 0)
    );
end entity jpeg_top;


architecture MyHDL of jpeg_top is


constant ACTIVE_LOW: integer := 0;




begin




JPEG_TOP_INSTANCE_1_TEST_PROCESS: process (clk_fast) is
begin
    if rising_edge(clk_fast) then
        if bool(reset_n) then
            jp_lf <= to_unsigned(0, 16);
            jp_sa <= to_unsigned(0, 16);
            jp_rh <= to_unsigned(0, 16);
            if (jp_flgs(0) = '1') then
                addr_rom <= (1 + offset);
            else
                addr_rom <= (0 + offset);
            end if;
        else
            if bool(jp_flgs(0)) then
                if (addr_rom = (1 + offset)) then
                    jp_lf <= dout_rom;
                    addr_rom <= (addr_rom + 1);
                else
                    if (addr_rom = (2 + offset)) then
                        jp_sa <= dout_rom;
                        addr_rom <= (addr_rom + 1);
                    else
                        if (addr_rom = (3 + offset)) then
                            jp_rh <= dout_rom;
                        end if;
                    end if;
                end if;
            elsif (addr_rom = (0 + offset)) then
                jp_lf <= dout_rom;
                addr_rom <= (addr_rom + 1);
            else
                if (addr_rom = (1 + offset)) then
                    jp_sa <= dout_rom;
                    addr_rom <= (addr_rom + 1);
                else
                    if (addr_rom = (2 + offset)) then
                        jp_rh <= dout_rom;
                    end if;
                end if;
            end if;
        end if;
    end if;
end process JPEG_TOP_INSTANCE_1_TEST_PROCESS;


JPEG_TOP_INSTANCE_2_LOGIC: process (jp_sa, jp_flgs, jp_lf, rdy, jp_rh) is
begin
    if bool(rdy) then
        sig_out <= unsigned'(jp_flgs & jp_rh & jp_sa & jp_lf);
    else
        sig_out <= to_unsigned(0, 52);
    end if;
end process JPEG_TOP_INSTANCE_2_LOGIC;


JPEG_TOP_INSTANCE_3_JPEG: process (clk_fast) is
begin
    if rising_edge(clk_fast) then
        if bool(sig_in(50)) then
            noupdate_s <= '0';
            if bool(sig_in(48)) then
                if bool(sig_in(49)) then
                    res_s <= signed(sig_in(32-1 downto 16) - (shift_right(sig_in(16-1 downto 0), 1) + shift_right(sig_in(48-1 downto 32), 1)));
                else
                    res_s <= signed(sig_in(32-1 downto 16) + (shift_right(sig_in(16-1 downto 0), 1) + shift_right(sig_in(48-1 downto 32), 1)));
                end if;
            else
                if bool(sig_in(49)) then
                    res_s <= signed(sig_in(32-1 downto 16) + shift_right(((sig_in(16-1 downto 0) + sig_in(48-1 downto 32)) + 2), 2));
                else
                    res_s <= signed(sig_in(32-1 downto 16) - shift_right(((sig_in(16-1 downto 0) + sig_in(48-1 downto 32)) + 2), 2));
                end if;
            end if;
        else
            noupdate_s <= '1';
        end if;
    end if;
end process JPEG_TOP_INSTANCE_3_JPEG;


JPEG_TOP_INSTANCE_4_FSM: process (state_r, offset_r, reset_fsm_r) is
begin
    if (reset_fsm_r = '0') then
        -- The start up value for reset_n is 1 |__
        -- Need to added after 70 ns to the line below
        -- which will total 80 ns 
        -- cut after 70 ns and paste in the line below  
        addr_res <= resize(offset_r + 1, 9) after 70 ns;
        reset_n <= '0';
        state_r <= ODD_SA;
    else
        case state_r is
            when ODD_SA =>
                rdy <= '1';
                jp_flgs <= to_unsigned(6, 4);
                offset <= offset_r;
                -- The start up value for reset_n is 1 |__
                -- Need to added after 70 ns to the line below
                -- which will total 80 ns
                -- rdy needs to go hi 30 ns after reset_n goes lo
                -- rdy needs go lo 10 ns before reset_n goes hi
                -- cut after 70 ns and paste in the line below 
                reset_n <= '1' after 70 ns;
                -- The start up value for rdy is 0 __|
                -- rdy needs to go hi 10 ns after reset_n goes lo
                -- rdy needs go lo 10 ns before reset_n goes hi
                -- cut after 60 ns and paste in the line below 
                rdy <= '0' after 60 ns;
                state_r <= ODD_SA;
            when EVEN_SA =>
                jp_flgs <= to_unsigned(7, 4);
                state_r <= ODD_SA;
            when TRAN_RAM =>
                state_r <= ODD_SA;
            when others =>
                assert False report "End of Simulation" severity Failure;
        end case;
    end if;
end process JPEG_TOP_INSTANCE_4_FSM;

end architecture MyHDL;
