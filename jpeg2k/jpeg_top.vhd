-- File: jpeg_top.vhd
-- Generated by MyHDL 0.9dev
-- Date: Fri Nov  7 17:15:30 2014



package pck_jpeg_top is

attribute enum_encoding: string;

    type t_enum_t_State_1 is (
    INIT,
    ODD_SA,
    EVEN_SA,
    TRAN_RAM
);
attribute enum_encoding of t_enum_t_State_1: type is "0001 0010 0100 1000";

end package pck_jpeg_top;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_09.all;

use work.pck_jpeg_top.all;

entity jpeg_top is
    port (
        clk_fast: in std_logic;
        offset: inout unsigned(11 downto 0);
        dout_rom: in unsigned(15 downto 0);
        addr_rom: inout unsigned(11 downto 0);
        jp_lf: inout unsigned(15 downto 0);
        jp_sa: inout unsigned(15 downto 0);
        jp_rh: inout unsigned(15 downto 0);
        jp_flgs: inout unsigned(3 downto 0);
        reset_n: inout std_logic;
        rdy: inout std_logic;
        sig_in: inout unsigned(51 downto 0);
        noupdate_s: inout std_logic;
        res_s: out signed (15 downto 0);
        state_r: inout t_enum_t_State_1;
        reset_fsm_r: in std_logic;
        addr_res: out unsigned(8 downto 0);
        offset_r: inout unsigned(11 downto 0);
        addr_not_reached: inout std_logic;
        sig_out_valid: out std_logic
    );
end entity jpeg_top;


architecture MyHDL of jpeg_top is


constant ACTIVE_LOW: integer := 0;




begin




JPEG_TOP_INSTANCE_1_ROM_RD: process (clk_fast) is
begin
    if rising_edge(clk_fast) then
        if bool(reset_n) then
            jp_lf <= to_unsigned(0, 16);
            jp_sa <= to_unsigned(0, 16);
            jp_rh <= to_unsigned(0, 16);
            addr_not_reached <= '0';
            if (jp_flgs(0) = '1') then
                addr_rom <= (1 + offset);
            else
                addr_rom <= (0 + offset);
            end if;
        else
            if bool(jp_flgs(0)) then
                if (addr_rom = (1 + offset)) then
                    jp_lf <= dout_rom;
                    addr_rom <= (addr_rom + 1);
                else
                    if (addr_rom = (2 + offset)) then
                        jp_sa <= dout_rom;
                        addr_rom <= (addr_rom + 1);
                    else
                        if (addr_rom = (3 + offset)) then
                            jp_rh <= dout_rom;
                            addr_not_reached <= '1';
                        end if;
                    end if;
                end if;
            elsif (addr_rom = (0 + offset)) then
                jp_lf <= dout_rom;
                addr_rom <= (addr_rom + 1);
            else
                if (addr_rom = (1 + offset)) then
                    jp_sa <= dout_rom;
                    addr_rom <= (addr_rom + 1);
                else
                    if (addr_rom = (2 + offset)) then
                        jp_rh <= dout_rom;
                        addr_not_reached <= '1';
                    end if;
                end if;
            end if;
        end if;
    end if;
end process JPEG_TOP_INSTANCE_1_ROM_RD;


JPEG_TOP_INSTANCE_2_RAM2SIG: process (jp_sa, jp_flgs, jp_rh, rdy, addr_not_reached, jp_lf) is
begin
    if bool(rdy) then
        if bool(addr_not_reached) then
            sig_in <= unsigned'(jp_flgs & jp_rh & jp_sa & jp_lf);
            sig_out_valid <= '0';
        end if;
    else
        sig_in <= to_unsigned(0, 52);
    end if;
end process JPEG_TOP_INSTANCE_2_RAM2SIG;


JPEG_TOP_INSTANCE_3_JPEG: process (clk_fast) is
begin
    if rising_edge(clk_fast) then
        if bool(sig_in(50)) then
            noupdate_s <= '0';
            if bool(sig_in(48)) then
                if bool(sig_in(49)) then
                    res_s <= signed(sig_in(32-1 downto 16) - (shift_right(sig_in(16-1 downto 0), 1) + shift_right(sig_in(48-1 downto 32), 1)));
                else
                    res_s <= signed(sig_in(32-1 downto 16) + (shift_right(sig_in(16-1 downto 0), 1) + shift_right(sig_in(48-1 downto 32), 1)));
                end if;
            else
                if bool(sig_in(49)) then
                    res_s <= signed(sig_in(32-1 downto 16) + shift_right(((sig_in(16-1 downto 0) + sig_in(48-1 downto 32)) + 2), 2));
                else
                    res_s <= signed(sig_in(32-1 downto 16) - shift_right(((sig_in(16-1 downto 0) + sig_in(48-1 downto 32)) + 2), 2));
                end if;
            end if;
        else
            noupdate_s <= '1';
        end if;
    end if;
end process JPEG_TOP_INSTANCE_3_JPEG;


JPEG_TOP_INSTANCE_4_FSM: process (noupdate_s, state_r, addr_not_reached, offset_r, reset_fsm_r) is
begin
    if (reset_fsm_r = '0') then
        -- This is used for testing ODD_SA only 1 can be used for now
--        offset <= to_unsigned(0, 12);
--        addr_res <= to_unsigned(0, 9);
        -- This is used for testing EVEN_SA only 1 can be used for now
        offset <= to_unsigned(1, 12);
        addr_res <= to_unsigned(2, 9);
        state_r <= INIT;
    else
        case state_r is
            when INIT =>
                reset_n <= '0';
                rdy <= '0';
                offset <= to_unsigned(0, 12);
                addr_res <= to_unsigned(0, 9);
                -- This is used for testing ODD_SA only 1 can be used for now
--                state_r <= ODD_SA;
                -- This is used for testing EVEN_SA only 1 can be used for now
                state_r <= EVEN_SA;
            when ODD_SA =>
                rdy <= '1';
                jp_flgs <= to_unsigned(6, 4);
                offset <= offset_r;
                if (noupdate_s /= '1') then
                    reset_n <= '1';
                end if;
                if (offset_r <= 58) then
                    if ((noupdate_s /= '1') and bool(addr_not_reached)) then
                        offset <= (offset_r + 2);
                        addr_res <= resize(offset_r + 1, 9);
                        rdy <= '0';
                        -- cut after 30 ns and paste in the line below
                        reset_n <= '0' after 30 ns;
                    end if;
                else
                    -- Need to setup for next state
                    state_r <= ODD_SA;
                end if;
            when EVEN_SA =>
                rdy <= '1';
                jp_flgs <= to_unsigned(7, 4);
                offset <= offset_r;
                if (noupdate_s /= '1') then
                    reset_n <= '1';
                end if;
                if (offset_r <= 60) then
                    if ((noupdate_s /= '1') and bool(addr_not_reached)) then
                        offset <= (offset_r + 2);
                        addr_res <= resize(offset_r + 1, 9);
                        rdy <= '0';
                        -- cut after 30 ns and paste in the line below
                        reset_n <= '0' after 30 ns;
                    end if;
                else
                    -- Need to setup for next state
                    state_r <= EVEN_SA;
                end if;
            when TRAN_RAM =>
                state_r <= INIT;
            when others =>
                assert False report "End of Simulation" severity Failure;
        end case;
    end if;
end process JPEG_TOP_INSTANCE_4_FSM;


JPEG_TOP_INSTANCE_5_FSMUPDATE: process (clk_fast) is
begin
    if rising_edge(clk_fast) then
        offset_r <= offset;
    end if;
end process JPEG_TOP_INSTANCE_5_FSMUPDATE;

end architecture MyHDL;
