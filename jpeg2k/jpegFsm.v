// File: jpegFsm.v
// Generated by MyHDL 0.9dev
// Date: Wed Oct 29 12:03:03 2014


`timescale 1ns/10ps

module jpegFsm (
    state_r,
    reset_fsm_r,
    addr_res,
    offset,
    offset_r,
    jp_flgs,
    reset_n,
    rdy
);


output [2:0] state_r;
reg [2:0] state_r;
input reset_fsm_r;
output [8:0] addr_res;
reg [8:0] addr_res;
output [11:0] offset;
reg [11:0] offset;
input [11:0] offset_r;
output [3:0] jp_flgs;
reg [3:0] jp_flgs;
output reset_n;
reg reset_n;
output rdy;
reg rdy;






always @(state_r, offset_r, reset_fsm_r) begin: JPEGFSM_FSM
    if ((reset_fsm_r == 0)) begin
        // The start up value for reset_n is 1 |__
        // Need to added after 70 ns to the line below
        // which will total 80 ns 
        // cut after 70 ns and paste in the line below  
        addr_res = (offset_r + 1);
        reset_n = 0;
        state_r = 3'b001;
    end
    else begin
        casez (state_r)
            3'b??1: begin
                rdy = 1;
                jp_flgs = 6;
                offset = offset_r;
                // The start up value for reset_n is 1 |__
                // Need to added after 70 ns to the line below
                // which will total 80 ns
                // rdy needs to go hi 30 ns after reset_n goes lo
                // rdy needs go lo 10 ns before reset_n goes hi
                // cut after 70 ns and paste in the line below 
                reset_n = 1;
                // The start up value for rdy is 0 __|
                // rdy needs to go hi 10 ns after reset_n goes lo
                // rdy needs go lo 10 ns before reset_n goes hi
                // cut after 60 ns and paste in the line below 
                rdy = 0;
                state_r = 3'b001;
            end
            3'b?1?: begin
                jp_flgs = 7;
                state_r = 3'b001;
            end
            3'b1??: begin
                state_r = 3'b001;
            end
            default: begin
                $finish;
            end
        endcase
    end
end

endmodule
