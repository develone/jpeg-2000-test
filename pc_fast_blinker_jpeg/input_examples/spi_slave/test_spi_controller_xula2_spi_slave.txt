--- /home/vidal/wkg/rhea/test/test_cores/test_spi/test_spi_controller.py	2016-03-31 06:14:08.000000000 -0600
+++ xula2_spi_slave.py	2016-04-07 10:39:22.166270343 -0600
@@ -8,7 +8,7 @@
 
 import myhdl
 from myhdl import (Signal, intbv, instance, always_comb,
-                   delay, StopSimulation)
+                   delay, StopSimulation, always, ResetSignal)
 
 from rhea.cores.spi import spi_controller
 from rhea.cores.spi import SPIBus
@@ -20,11 +20,13 @@
 from rhea.system import FIFOBus
 
 from rhea.utils.test import run_testbench, tb_convert, tb_args, tb_default_args
-
+from rhea.build.boards import get_board
+from pprint import pprint
 
 # global signals used by many
 clock = Clock(0, frequency=100e6)
-reset = Reset(0, active=1, async=True)
+#reset = Reset(0, active=1, async=True)
+reset = ResetSignal(0, active=1,async=True)
 glbl = Global(clock, reset)
 portmap = dict(
     glbl=glbl,
@@ -34,7 +36,7 @@
 )
 
 
-def spi_controller_top(clock, reset, sck, mosi, miso, ss):
+def spi_slave_top(clock, sck, mosi, miso, ss):
     """SPI top-level for conversion testing"""
     glbl = Global(clock, reset)
     spibus = SPIBus(sck, mosi, miso, ss)
@@ -52,6 +54,26 @@
         fifobus.write_data.next = fifobus.read_data
         fifobus.write.next = fifobus.read_valid
         fifobus.read.next = not fifobus.empty
+    reset_dly_cnt = Signal(intbv(0)[32:])
+    
+    @always(clock.posedge)
+    
+    def reset_tst():
+	'''
+	For the first 256 clocks the reset is forced to lo
+	for clock 500 to 7000 the reset is set hi
+	the the reset is lo
+		
+	'''
+
+        if (reset_dly_cnt < 700):
+            reset_dly_cnt.next = reset_dly_cnt + 1
+            if (reset_dly_cnt == 256):
+                reset.next = 0
+            if (reset_dly_cnt == 500):        
+                reset.next = 1
+        else:
+            reset.next = 0
 
     return myhdl.instances()
 
@@ -61,8 +83,23 @@
     clock = Clock(0, frequency=50e6)
     reset = Reset(0, active=1, async=False)
     sck, mosi, miso, ss = Signals(bool(0), 4)
-    tb_convert(spi_controller_top, clock, reset, sck, mosi, miso, ss)
+    tb_convert(spi_slave_top, clock, sck, mosi, miso, ss)
 
+def build():
+    brd = get_board('xula2_stickit_mb')
+    brd.device = 'XC6SLX9'
+    #chan 24 BCM9_MISO -->  RPi2B
+    brd.add_port('mosi', 'F1')
+    #chan 25 BCM10_MOSI <--- RPi2B
+    brd.add_port('miso', 'F2')
+    #chan 23 BCM10_SCLK
+    brd.add_port('sck', 'H2')
+    #chan 22 BCM5 
+    brd.add_port('ss', 'H1')     
+    flow = brd.get_flow(top=spi_slave_top)
+    flow.run()
+    info = flow.get_utilization()
+    pprint(info)
 
 def test_spi_controller_cso(args=None):
     args = tb_default_args(args)
@@ -74,14 +111,15 @@
     # a FIFOBus to push-pull data from the SPI controller
     fifobus = FIFOBus(size=16)
     # control-status object for the SPI controller
-    cso = spi_controller.cso()
+    #cso = spi_controller.cso()
 
     spiee = SPIEEPROM()
     asserr = Signal(bool(0))
 
     def bench_spi_cso():
         spi_controller.debug = True    # enable debug monitors
-        tbdut = spi_controller(glbl, spibus, fifobus, cso=cso)
+        #tbdut = spi_controller(glbl, spibus, fifobus, cso=cso)
+        tbdut = spi_controller(glbl, spibus, fifobus)
         tbeep = spiee.gen(clock, reset, spibus)
         tbclk = clock.gen(hticks=5)
 
@@ -264,5 +302,7 @@
 
 
 if __name__ == '__main__':
-    # test_spi_controller_cso(tb_args())
-    test_convert()
+    #  test_spi_controller_cso(tb_args())
+    #test_convert()
+    build()
+    #test_spi_memory_mapped()
