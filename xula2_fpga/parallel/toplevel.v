// File: toplevel.v
// Generated by MyHDL 1.0dev
// Date: Fri May  6 21:21:07 2016


`timescale 1ns/10ps

module toplevel (
    i_clk,
    i_rpi2B,
    fr_depp,
    o_rpi2B,
    to_depp
);


input i_clk;
input [7:0] i_rpi2B;
input [7:0] fr_depp;
output [7:0] o_rpi2B;
wire [7:0] o_rpi2B;
output [7:0] to_depp;
wire [7:0] to_depp;

reg r_dstb_n;
wire [31:0] r_data;
reg r_write_n;
reg r_int;
reg r_astb_n;
wire o_wait;
reg [7:0] addr;
wire astb;
wire r_err;
reg [4:0] reset_dly_cnt;
wire i_dstb_n;
wire w_wait;
reg x_astb_n;
wire o_wb_cyc;
reg l_dstb_n;
wire i_int;
reg x_dstb_n;
wire dstb;
reg [7:0] r_depp;
reg reset;
wire [7:0] i_depp;
reg [31:0] o_wb_addr;
reg l_astb_n;
reg [7:0] o_depp;
reg x_write_n;
reg [7:0] x_depp;
wire w_write;
wire i_astb_n;
wire i_write_n;
reg [31:0] o_wb_data;


assign r_data = 0;
assign r_err = 0;
assign i_dstb_n = 0;
assign o_wb_cyc = 0;
assign i_int = 0;
assign i_depp = 0;
assign i_astb_n = 0;
assign i_write_n = 0;


// For the first 4 clocks the reset is forced to lo
// for clock 6 to 31 the reset is set hi
// then the reset is lo
always @(posedge i_clk) begin: TOPLEVEL_RESET_TST
    if ((reset_dly_cnt < 31)) begin
        reset_dly_cnt <= (reset_dly_cnt + 1);
        if ((reset_dly_cnt <= 4)) begin
            reset <= 0;
        end
        if ((reset_dly_cnt >= 5)) begin
            reset <= 1;
        end
    end
    else begin
        reset <= 0;
    end
end



assign o_rpi2B[1-1:0] = o_depp[1-1:0];
assign o_rpi2B[2-1:1] = o_depp[2-1:1];
assign o_rpi2B[3-1:2] = o_depp[3-1:2];
assign o_rpi2B[4-1:3] = o_depp[4-1:3];
assign o_rpi2B[5-1:4] = o_depp[5-1:4];
assign o_rpi2B[6-1:5] = o_depp[6-1:5];
assign o_rpi2B[7-1:6] = o_depp[7-1:6];
assign o_rpi2B[8-1:7] = o_depp[8-1:7];



assign to_depp[1-1:0] = i_rpi2B[1-1:0];
assign to_depp[2-1:1] = i_rpi2B[2-1:1];
assign to_depp[3-1:2] = i_rpi2B[3-1:2];
assign to_depp[4-1:3] = i_rpi2B[4-1:3];
assign to_depp[5-1:4] = i_rpi2B[5-1:4];
assign to_depp[6-1:5] = i_rpi2B[6-1:5];
assign to_depp[7-1:6] = i_rpi2B[7-1:6];
assign to_depp[8-1:7] = i_rpi2B[8-1:7];



assign dstb = ((!r_dstb_n) && l_dstb_n);


always @(posedge i_clk) begin: TOPLEVEL_DUT_MY_WBDEPP_RTL2
    l_dstb_n <= r_dstb_n;
    l_astb_n <= r_astb_n;
end



assign w_write = (!r_write_n);



assign astb = ((!r_astb_n) && l_astb_n);

// ast depends on not r_astb_n and l_astb_n 
// 
// addr depends on (w_write and astb)
// r_depp --> addr
// 
// o_wb_addr & o_wb_data 32 bits are set when 
// (w_write and dstb and addr upper 5 bits are 0)
// 
// When the lsb bit 3 to 0 of addr 
// 000     r_depp --> o_wb_addr 31-24
// 001 r_depp --> o_wb_addr 23-16
// 010 r_depp --> o_wb_addr 15-8
// 011 r_depp --> o_wb_addr 7-0
// 
// When the lsb bit 7 to 4 of addr 
// 100     r_depp --> o_wb_data 31-24
// 101 r_depp --> o_wb_data 23-16
// 110 r_depp --> o_wb_data 15-8
// 111 r_depp --> o_wb_data 7-0
//  
always @(posedge i_clk) begin: TOPLEVEL_DUT_MY_WBDEPP_RTL5
    if ((w_write && astb)) begin
        addr <= r_depp;
    end
    if ((w_write && dstb && (addr[8-1:3] == 0))) begin
        if ((addr[3-1:0] == 0)) begin
            o_wb_addr[32-1:24] <= r_depp;
        end
        if ((addr[3-1:0] == 1)) begin
            o_wb_addr[24-1:16] <= r_depp;
        end
        if ((addr[3-1:0] == 2)) begin
            o_wb_addr[16-1:8] <= r_depp;
        end
        if ((addr[3-1:0] == 3)) begin
            o_wb_addr[8-1:0] <= r_depp;
        end
        if ((addr[3-1:0] == 4)) begin
            o_wb_data[32-1:24] <= r_depp;
        end
        if ((addr[3-1:0] == 5)) begin
            o_wb_data[24-1:16] <= r_depp;
        end
        if ((addr[3-1:0] == 6)) begin
            o_wb_data[16-1:8] <= r_depp;
        end
        else begin
            o_wb_data[8-1:0] <= r_depp;
        end
    end
    // if(o_wb_cyc and (i_wb_ack and not o_wb_we)):
    // r_data.next = i_wb_data 
end



assign o_wait = w_wait;



assign w_wait = (!(x_dstb_n && x_astb_n && r_dstb_n && r_astb_n && l_dstb_n && l_astb_n));


always @(posedge i_clk) begin: TOPLEVEL_DUT_MY_WBDEPP_DELAYED1
    x_dstb_n <= i_dstb_n;
    x_astb_n <= i_astb_n;
    x_write_n <= i_write_n;
    x_depp <= i_depp;
end


always @(posedge i_clk) begin: TOPLEVEL_DUT_MY_WBDEPP_DELAY2
    r_dstb_n <= x_dstb_n;
    r_astb_n <= x_astb_n;
    r_write_n <= x_write_n;
    r_depp <= x_depp;
end


always @(posedge i_clk) begin: TOPLEVEL_DUT_MY_WBDEPP_ADDR_DATA
    if (addr[4]) begin
        o_depp <= {o_wb_cyc, r_int, r_err};
    end
    if ((w_write && dstb && (addr[8-1:3] == 0))) begin
        if ((addr[3-1:0] == 0)) begin
            o_depp <= o_wb_addr[32-1:24];
        end
        if ((addr[3-1:0] == 1)) begin
            o_depp <= o_wb_addr[24-1:16];
        end
        if ((addr[3-1:0] == 2)) begin
            o_depp <= o_wb_addr[16-1:8];
        end
        if ((addr[3-1:0] == 3)) begin
            o_depp <= o_wb_addr[8-1:0];
        end
        if ((addr[3-1:0] == 4)) begin
            o_depp <= r_data[32-1:24];
        end
        if ((addr[3-1:0] == 5)) begin
            o_depp <= r_data[24-1:16];
        end
        if ((addr[3-1:0] == 6)) begin
            o_depp <= r_data[16-1:8];
        end
        else begin
            o_depp <= r_data[8-1:0];
        end
    end
    r_int <= (i_int || (r_int && ((~dstb) || w_write || (~addr[4]))));
end

endmodule
