-- File: RamCtrl.vhd
-- Generated by MyHDL 0.9dev
-- Date: Mon Sep 22 05:38:26 2014



package pck_RamCtrl is

attribute enum_encoding: string;

    type t_enum_t_State_1 is (
    INIT,
    RD_AND_JPEG_DATA,
    WR_DATA,
    INTERLACE,
    DONE
);
attribute enum_encoding of t_enum_t_State_1: type is "00001 00010 00100 01000 10000";

end package pck_RamCtrl;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_09.all;

use work.pck_RamCtrl.all;

entity RamCtrl is
    port (
        SOF: out std_logic;
        state: inout t_enum_t_State_1;
        WR_DATAFlag: in std_logic;
        clk_fast: in std_logic;
        reset_n: in std_logic
    );
end entity RamCtrl;
-- Framing control FSM.
-- 
-- SOF -- start-of-frame output bit
-- state -- RamState output
-- WR_DATAFlag -- WR_DATA pattern found indication input
-- clk_fast -- clock input
-- reset_n -- active low reset

architecture MyHDL of RamCtrl is


constant FRAME_SIZE: integer := 8;
constant ACTIVE_LOW: integer := 0;



signal index: unsigned(7 downto 0);

begin




RAMCTRL_FSM: process (clk_fast, reset_n) is
begin
    if (reset_n = '0') then
        SOF <= '0';
        index <= to_unsigned(0, 8);
        state <= RD_AND_JPEG_DATA;
    elsif rising_edge(clk_fast) then
        index <= ((index + 1) mod FRAME_SIZE);
        SOF <= '0';
        case state is
            when INIT =>
                index <= to_unsigned(1, 8);
                if bool(WR_DATAFlag) then
                    state <= RD_AND_JPEG_DATA;
                end if;
            when RD_AND_JPEG_DATA =>
                if (index = 0) then
                    if bool(WR_DATAFlag) then
                        state <= WR_DATA;
                    else
                        state <= INIT;
                    end if;
                end if;
            when WR_DATA =>
                SOF <= '0';
            when INTERLACE =>
                if (index = 0) then
                    if (not bool(WR_DATAFlag)) then
                        state <= INIT;
                    end if;
                end if;
                SOF <= stdl(signed(resize(index, 9)) = (FRAME_SIZE - 1));
            when DONE =>
                SOF <= '0';
            when others =>
                assert False report "End of Simulation" severity Failure;
        end case;
    end if;
end process RAMCTRL_FSM;

end architecture MyHDL;
