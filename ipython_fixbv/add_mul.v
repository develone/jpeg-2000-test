// File: add_mul.v
// Generated by MyHDL 0.9dev
// Date: Fri Jun 27 04:57:11 2014


`timescale 1ns/10ps

module add_mul (
    d3,
    a2,
    clk,
    x2,
    x3,
    x4,
    x5,
    p,
    even_odd,
    fwd_inv
);


output signed [23:0] d3;
reg signed [23:0] d3;
output signed [23:0] a2;
reg signed [23:0] a2;
input clk;
input signed [23:0] x2;
input signed [23:0] x3;
input signed [23:0] x4;
input signed [23:0] x5;
input p;
input even_odd;
input fwd_inv;

wire [35:0] ca3;
wire [35:0] ca2;
wire [35:0] ca1;
wire [35:0] ca4;
wire [35:0] ra4;
wire [35:0] ra1;
wire [35:0] ra2;
wire [35:0] ra3;


assign ca3 = 115724;
assign ca2 = -6945;
assign ca1 = -207898;
assign ca4 = 58131;
assign ra4 = -58132;
assign ra1 = 207897;
assign ra2 = 6944;
assign ra3 = -115725;



always @(posedge clk) begin: ADD_MUL_RTL
    integer t;
    integer t1;
    if ((!p)) begin
        if (even_odd) begin
            if (fwd_inv) begin
                t = ((x2 + x3) * ca1);
                d3 <= t;
            end
            else begin
                t1 = ((x4 + x5) * ra4);
                a2 <= t1;
            end
        end
        else begin
            if (fwd_inv) begin
                t1 = ((x4 + x5) * ca2);
                a2 <= t1;
            end
            else begin
                t = ((x2 + x3) * ra3);
                d3 <= t;
            end
        end
    end
    else begin
        if (even_odd) begin
            if (fwd_inv) begin
                t = ((x2 + x3) * ca3);
                d3 <= t;
            end
            else begin
                t1 = ((x4 + x5) * ra2);
                a2 <= t1;
            end
        end
        else begin
            if (fwd_inv) begin
                t1 = ((x4 + x5) * ca4);
                a2 <= t1;
            end
            else begin
                t = ((x2 + x3) * ra1);
                d3 <= t;
            end
        end
    end
end

endmodule
