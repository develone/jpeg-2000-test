// File: jpeg_sm.v
// Generated by MyHDL 0.9dev
// Date: Mon Jul 28 16:22:35 2014


`timescale 1ns/10ps

module jpeg_sm (
    resetn,
    pclk,
    state,
    even_odd,
    addr_even,
    addr_sam,
    addr_left,
    addr_right,
    addr_odd,
    updated,
    transoutrdy,
    sam
);
// If state is TRANSFER_IN data is written to ram_sam, ram_left, and ram_right.
// If state is TRANSFER_OUT ram_even and ram_odd. 
// If state is Update_Sample on a given sam the addr_left will be set sam - 1 & addr_right will 
// be set sam + 1 updated will be set True
// if sam is even even_odd will be set True if sam is odd even_odd will be set False
// if sam = 255 or 256 state_t is set TRANSFER_OUT which is the end of samples

input resetn;
input pclk;
output [1:0] state;
reg [1:0] state;
output even_odd;
reg even_odd;
output [7:0] addr_even;
reg [7:0] addr_even;
output [7:0] addr_sam;
reg [7:0] addr_sam;
output [7:0] addr_left;
reg [7:0] addr_left;
output [7:0] addr_right;
reg [7:0] addr_right;
output [7:0] addr_odd;
reg [7:0] addr_odd;
output updated;
reg updated;
output transoutrdy;
reg transoutrdy;
input [7:0] sam;






always @(posedge pclk, negedge resetn) begin: JPEG_SM_STATE_MACHINE
    if (resetn == 0) begin
        addr_right <= 0;
        updated <= 0;
        transoutrdy <= 0;
        state <= 2'b01;
        addr_odd <= 0;
        even_odd <= 0;
        addr_sam <= 0;
        addr_even <= 0;
        addr_left <= 0;
    end
    else begin
        if ((state == 2'b00)) begin
            state <= 2'b01;
        end
        else if ((state == 2'b01)) begin
            if (((sam % 2) == 0)) begin
                even_odd <= 1;
                addr_even <= sam;
            end
            else begin
                even_odd <= 0;
                addr_odd <= sam;
                addr_sam <= sam;
                addr_left <= (sam - 1);
                addr_right <= (sam + 1);
                addr_even <= sam;
                addr_odd <= sam;
                updated <= 1;
                if ((sam == 256)) begin
                    updated <= 0;
                    state <= 2'b10;
                end
            end
        end
        else if ((sam == 255)) begin
            updated <= 0;
            state <= 2'b10;
        end
        else if ((state == 2'b10)) begin
            transoutrdy <= 1;
            state <= 2'b00;
        end
        else if ((state == 2'b11)) begin
            updated <= 1;
            state <= 2'b01;
            state <= 2'b00;
        end
    end
end

endmodule
