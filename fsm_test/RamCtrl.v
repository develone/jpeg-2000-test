// File: RamCtrl.v
// Generated by MyHDL 0.9dev
// Date: Tue Sep 23 15:23:44 2014


`timescale 1ns/10ps

module RamCtrl (
    SOF,
    state,
    WR_DATAFlag,
    clk_fast,
    reset_n,
    addrsam_r,
    addrjpeg_r,
    rd_r,
    wr_r
);
// Framing control FSM.
// 
// SOF -- start-of-frame output bit
// state -- RamState output
// WR_DATAFlag -- WR_DATA pattern found indication input
// clk_fast -- clock input
// reset_n -- active low reset

output SOF;
reg SOF;
output [4:0] state;
reg [4:0] state;
input WR_DATAFlag;
input clk_fast;
input reset_n;
output [22:0] addrsam_r;
reg [22:0] addrsam_r;
output [22:0] addrjpeg_r;
reg [22:0] addrjpeg_r;
output rd_r;
reg rd_r;
output wr_r;
reg wr_r;

reg [7:0] index;





always @(posedge clk_fast, negedge reset_n) begin: RAMCTRL_FSM
    if ((reset_n == 0)) begin
        SOF <= 0;
        index <= 0;
        addrsam_r <= 1;
        addrjpeg_r <= (8192 + 1);
        rd_r <= 0;
        wr_r <= 0;
        state <= 5'b00001;
    end
    else begin
        index <= ((index + 1) % 8);
        SOF <= 0;
        casez (state)
            5'b????1: begin
                addrsam_r <= 1;
                addrjpeg_r <= (8192 + 1);
                rd_r <= 0;
                wr_r <= 0;
                state <= 5'b00010;
            end
            5'b???1?: begin
                rd_r <= 1;
                if ((addrsam_r <= 21)) begin
                    addrsam_r <= (addrsam_r + 2);
                end
                else begin
                    addrsam_r <= 1;
                    state <= 5'b00100;
                end
            end
            5'b??1??: begin
                rd_r <= 0;
                wr_r <= 1;
                SOF <= 1;
                if ((addrjpeg_r <= (8192 + 21))) begin
                    addrjpeg_r <= (addrjpeg_r + 2);
                end
                else begin
                    wr_r <= 0;
                    addrjpeg_r <= (8192 + 1);
                    state <= 5'b01000;
                end
            end
            5'b?1???: begin
                if ((addrsam_r <= 21)) begin
                    rd_r <= 1;
                    addrsam_r <= (addrsam_r + 2);
                    rd_r <= 0;
                    wr_r <= 1;
                    addrjpeg_r <= (addrjpeg_r + 2);
                    wr_r <= 0;
                end
                else begin
                    addrsam_r <= 1;
                    addrjpeg_r <= (8192 + 1);
                    state <= 5'b00001;
                end
            end
            5'b1????: begin
                SOF <= 0;
            end
            default: begin
                $finish;
            end
        endcase
    end
end

endmodule
