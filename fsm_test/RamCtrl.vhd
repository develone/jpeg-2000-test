-- File: RamCtrl.vhd
-- Generated by MyHDL 0.9dev
-- Date: Tue Sep 23 15:23:44 2014



package pck_RamCtrl is

attribute enum_encoding: string;

    type t_enum_t_State_1 is (
    INIT,
    RD_AND_JPEG_DATA,
    WR_DATA,
    INTERLACE,
    DONE
);
attribute enum_encoding of t_enum_t_State_1: type is "00001 00010 00100 01000 10000";

end package pck_RamCtrl;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_09.all;

use work.pck_RamCtrl.all;

entity RamCtrl is
    port (
        SOF: out std_logic;
        state: inout t_enum_t_State_1;
        WR_DATAFlag: in std_logic;
        clk_fast: in std_logic;
        reset_n: in std_logic;
        addrsam_r: inout unsigned(22 downto 0);
        addrjpeg_r: inout unsigned(22 downto 0);
        rd_r: out std_logic;
        wr_r: out std_logic
    );
end entity RamCtrl;
-- Framing control FSM.
-- 
-- SOF -- start-of-frame output bit
-- state -- RamState output
-- WR_DATAFlag -- WR_DATA pattern found indication input
-- clk_fast -- clock input
-- reset_n -- active low reset

architecture MyHDL of RamCtrl is


constant FRAME_SIZE: integer := 8;
constant ACTIVE_LOW: integer := 0;



signal index: unsigned(7 downto 0);

begin




RAMCTRL_FSM: process (clk_fast, reset_n) is
begin
    if (reset_n = '0') then
        SOF <= '0';
        index <= to_unsigned(0, 8);
        addrsam_r <= to_unsigned(1, 23);
        addrjpeg_r <= to_unsigned(8192 + 1, 23);
        rd_r <= '0';
        wr_r <= '0';
        state <= INIT;
    elsif rising_edge(clk_fast) then
        index <= ((index + 1) mod FRAME_SIZE);
        SOF <= '0';
        case state is
            when INIT =>
                addrsam_r <= to_unsigned(1, 23);
                addrjpeg_r <= to_unsigned(8192 + 1, 23);
                rd_r <= '0';
                wr_r <= '0';
                state <= RD_AND_JPEG_DATA;
            when RD_AND_JPEG_DATA =>
                rd_r <= '1';
                if (addrsam_r <= 21) then
                    addrsam_r <= (addrsam_r + 2);
                else
                    addrsam_r <= to_unsigned(1, 23);
                    state <= WR_DATA;
                end if;
            when WR_DATA =>
                rd_r <= '0';
                wr_r <= '1';
                SOF <= '1';
                if (signed(resize(addrjpeg_r, 24)) <= (8192 + 21)) then
                    addrjpeg_r <= (addrjpeg_r + 2);
                else
                    wr_r <= '0';
                    addrjpeg_r <= to_unsigned(8192 + 1, 23);
                    state <= INTERLACE;
                end if;
            when INTERLACE =>
                if (addrsam_r <= 21) then
                    rd_r <= '1';
                    addrsam_r <= (addrsam_r + 2);
                    rd_r <= '0';
                    wr_r <= '1';
                    addrjpeg_r <= (addrjpeg_r + 2);
                    wr_r <= '0';
                else
                    addrsam_r <= to_unsigned(1, 23);
                    addrjpeg_r <= to_unsigned(8192 + 1, 23);
                    state <= INIT;
                end if;
            when DONE =>
                SOF <= '0';
            when others =>
                assert False report "End of Simulation" severity Failure;
        end case;
    end if;
end process RAMCTRL_FSM;

end architecture MyHDL;
