09/08/14
This is what the SDram should be
1000000000A000A300A600A900AC00AF00B2FF801B
         160 163 169 172 175
This is what I see when I read with gxsload.
1000000000A00000000000A900AC00AF00B2FF801B

##################################################################
# This program tests the interface between the host PC and the FPGA 
# on the XuLA board that has been programmed to act as a jpeg_lifting .
##################################################################

1 1
211 1005 166 249 172 0b1 0b1   211 should be 0  249 should be 169
0 1
211 1005 166 249 172 0b0 0b1   211 should be 254  249 should be 169
160 + 163 + 166 + 169 + 172 + 175 = 175 okay

-- Connections between the shift-register module and  jpeg.
  --    80          70         60        50        40          30        20        10         0
  --   1 0 9876543210987654 3210987654321098 7654321098765432 1098765432109876 5432109876543210
  signal fromjpeg_s : std_logic_vector(81 downto 0); -- From jpeg to PC.
  alias fromresult_s is fromjpeg_s(15 downto 0); -- jpeg output.
  alias fromsum_s is fromjpeg_s(31 downto 16); -- sum_r.
  alias fromleft_s is fromjpeg_s(47 downto 32);  -- jpeg's left pixel
  alias fromsam_s is fromjpeg_s(63 downto 48);  -- jpeg's sam pixel
  alias fromright_s is fromjpeg_s(79 downto 64); --jpeg's right right
  alias fromeven_odd_s is fromjpeg_s(80);
  alias fromfwd_inv_s is fromjpeg_s(81);
  
  signal tojpeg_s : std_logic_vector(1 downto 0); -- From PC to jpeg.
  --signal tojpeg_s : std_logic_vector(49 downto 0); -- From PC to jpeg.
  --signal fromsum_s : std_logic_vector(15 downto 0);
  --signal even_odd_tmp_s : std_logic;
  --signal fwd_inv_tmp_s : std_logic;
  alias even_odd_s is tojpeg_s(0);
  alias fwd_inv_s is tojpeg_s(1);
  
--*********************************************************************
  -- Send the summation to the HostIoToDut module and then on to the PC.
  --*********************************************************************
sumDut_s <= std_logic_vector(TO_UNSIGNED(sum_r, 16));
  resultDut_s <= (result_r);
leftDut_s <= std_logic_vector(left_r);
samDut_s <= std_logic_vector(sam_r);
rightDut_s <= std_logic_vector(right_r);

fromresult_s <= resultDut_s;
fromsum_s <= sumDut_s;
fromleft_s <= leftDut_s;
fromsam_s <= samDut_s;
fromright_s <= rightDut_s;

fromeven_odd_s <= even_odd_s;
fromfwd_inv_s <= fwd_inv_s;

chgs required
need to fix 12 should be 0
need to fix 211 should be 254
need to move 
 if std_logic(even_odd_s) = YES then
   result_x <= std_logic_vector(sam_r - (shift_right(left_r, 1) + shift_right(right_r, 1)));
 else 
   result_x <= std_logic_vector(sam_r + shift_right(((left_r + right_r) + 2), 2));
 end if;

clean up --use work.pck_myhdl_09.all;

need to return result_r instead of sumDut_s fixed step 1 result_s <= std_logic_vector(result_r); step 2
res_s <= result_s;
sumDut_s <= std_logic_vector(result_r);

removed jpeg.vhd & pck_myhdl_09.vhd
if even_odd_s = NO then
					result_x <= std_logic_vector(sam_r - (shift_right(left_r, 1) + shift_right(right_r, 1)));
				 else 
				   result_x <= std_logic_vector(sam_r + shift_right(((left_r + right_r) + 2), 2));
				 end if;
chgs pc_jpeg_sig.py
needed to determine the values of even_odd & fwd_inv sent

jpeg = XsDut(USB_ID, JPEG_ID, [1, 1], [16, 16, 16, 16, 16, 1, 1])
lift , sum, left, sam, right, e_ret, f_ret = jpeg.Exec(even_odd, fwd_inv)  # Use the jpeg in FPGA.
print lift.int, sum.int, left.int, sam.int, right.int, e_ret, f_ret
##################################################################
# This program tests the interface between the host PC and the FPGA 
# on the XuLA board that has been programmed to act as a jpeg_lifting .
##################################################################

0 1
0 12 166 169 172 0b0 0b1

if std_logic(even_odd_s) = YES then
					result_x <= std_logic_vector(sam_r - (shift_right(left_r, 1) + shift_right(right_r, 1)));
				 else 
				   result_x <= std_logic_vector(sam_r + shift_right(((left_r + right_r) + 2), 2));
				 end if;

##################################################################
# This program tests the interface between the host PC and the FPGA 
# on the XuLA board that has been programmed to act as a jpeg_lifting .
##################################################################

0 1
0 211 166 169 172 0b0 0b1				 
Given the above values for left sam and righ perform the fwd dwt odd should be 0 not 12 or 254 not 211 

09/07/14
modified files
    project_status.txt
    sdramspinst.bit
    SdramSPInst.vhd
    pc_jpeg_sig.py

There is a problem with adding left_r, right_r, sam_r ,left_x, right_x, sam_x since this can only be 0 to natural range 0 to RAM_SIZE_C * (2**RAM_WIDTH_C) - 1;

signal left_r, right_r, sam_r ,left_x, right_x, sam_x : RamWord_t;
Testing with storing -160 at addr 0

constant LEFT_ADDR_C             : natural   := 2;
constant SAM_ADDR_C             : natural   := 3;
constant RIGHT_ADDR_C             : natural   := 4;

:10000000FF60FF63FF66FF69FF6CFF6FFF72008890
:10001000005E0069006B006C006A00750078007D6E
FF66
FF69
FF6C

##################################################################
# This program tests the interface between the host PC and the FPGA 
# on the XuLA board that has been programmed to act as a jpeg_lifting .
##################################################################

0 1
0 -915 65382 65385 65388
09/06/14
chgs to "SdramSPInst.vhd"
checking in the "sdramspinst.bit"

##################################################################
# This program tests the interface between the host PC and the FPGA 
# on the XuLA board that has been programmed to act as a jpeg_lifting .
##################################################################

1 1
0 1005 160 163 166
Now the ram is initialized and 0 1 2 values are sent back
using the "python pc_jpeg_sig.py"

09/05/14
Modified the SdramSPInst to write data
in the range of lena
:1000000000A000A300A600A900AC00AF5500455514
0000 00A0 160
0001 00A3 163
0002 00A6 166
0003 00A9 169
0004 00AC 172
0005 00AF 175

##################################################################
# This program tests the interface between the host PC and the FPGA 
# on the XuLA board that has been programmed to act as a jpeg_lifting .
##################################################################

81 105 390 1 1
-166
-166 1005
